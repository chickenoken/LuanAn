
'use strict';
exexSMSApp.factory('MstBusinessControlModel', [ 'BaseModel', '$rootScope',
    function(BaseModel, $rootScope) {

    var model = BaseModel.getInstance();

    model.form = {
        listProcess : [],
        listSubProcess : [],
        business: {
            businessCd : '',
            businessName : '',
            isTemplate : '0',
            status : '',
            version : ''
        },
        modal : {
            businessCd : '',
            processGroupNo : '',
            processNo : '',
            processName : '',
            workflowFlag : true,
            referenceAuthority : '',
            accountCd : '',
            processGroupRead : '',
            processUserRead : '',
            processGroupCd : '',
            groupName : '',
            processUserCd : '',
            userName : '',
            alertDay : '',
            iconNo : '',
            iconBinaryData : '',
            processExplain : '',

            controlLabelName : '',
            controlType : '',
            listDataSource : '',
            requireFlag : '0',
            exportFileCd : '',

            listDetailProcess : []
        },
        modalGroup : {
            processGroupNo : '',
            processGroupName : '',
            groupGroupCd : '',
            groupUserCd : '',
            iconNo : '',
            iconBinaryData : '',
            workflowFlag : false
        },
        listP010004 : [],
        listS010013 : [],
        listS010014 : [],
        listP010003 : [],
        listP010006 : [],
        listMstGroup : [],
        listMstCode : [],
        listUser : [],
        listIcon : [],
        listPS00001 : []
    };

    model.hidden = {
        indexPushListProcess : 0,
        isDisabled : true,
        isSubmitted : false,
        isSubProcess : true,
        indexUpdate : 0,
        indexParent : 0,
        listIndexAddGroup : [],
        isGroupUpdate : false,
        isGroupIcon : false,
        indexGroupUpdate : 0,
        screenMode : 'INSERT',
        status : '03',
        //isUniqueEXEX04 : false,
        //isUniqueEXEX05 : false,
        //isUniqueEXEX08 : false,
        modalProcess : {
            isControlType : false,
            isSubmitted : false,
            isEXEX040508 : false,
            isDisabledGroup : false
        }
    };

    return model;
}]);

exexSMSApp.controller('mstBusinessManagementCtrl',
        ['$rootScope', '$scope', 'MstBusinessControlModel','MstBusinessControlService' , 'DialogsService', 'RouteService', 'HeaderModel', 'Messages',
         function($rootScope, $scope, MstBusinessControlModel, MstBusinessControlService, DialogsService, RouteService, HeaderModel, Messages) {

    $scope.model = MstBusinessControlModel;
    $scope.modelHeader = HeaderModel;

    $scope.init = function(){
        $scope.model.form.business.businessName = angular.element('#businessPlaceholder').text();
        $scope.getInit();
    };

    $scope.getInit = function(){
        MstBusinessControlService.initData({})
            .then(
                function(result) {
                    $scope.model.form.listP010003 = result.data.listP010003;
                    $scope.model.form.listP010004 = result.data.listP010004;
                    $scope.model.form.listP010006 = result.data.listP010006;
                    $scope.model.form.listS010013 = result.data.listS010013;
                    $scope.model.form.listS010014 = result.data.listS010014;
                    $scope.model.form.listMstGroup = result.data.listMstGroup;
                    $scope.model.form.listMstCode = result.data.listMstCode;
                    var business = angular.fromJson(sessionStorage.getItem("business"));
                    if(!ValidateUtil.isValidTextEmpty(business)){
                        $scope.inquiry(business);
                        $scope.model.hidden.screenMode = 'UPDATE';
                    }
                }
            );
    };

    $scope.addProcess = function(index){
        var options = {
            size: '1270'
        };
        DialogsService.showDialog('MstProcessManagement', 'MstProcessManagementDialogCtrl', {},options).result.then(function(param) { });

        $scope.model.hidden.indexPushListProcess = index;
        var itemTmp = {
            'orderId': '',
            'lineNo' : '',
            'controlLabelName': '',
            'controlType': '',
            'listDataSource' : '',
            'requireFlag': '',
            'editPermission': '1',
            'inputData': '',
            'readOnly': false,
        };

        $scope.model.form.modal.processName = '';
        $scope.model.form.modal.processNo = '';
        $scope.model.form.modal.workflowFlag = false;
        $scope.model.form.modal.referenceAuthority = '';
        $scope.model.form.modal.accountCd = '';
        $scope.model.form.modal.processGroupRead = '';
        $scope.model.form.modal.processUserRead = '';
        $scope.model.form.modal.processGroupCd = '';
        $scope.model.form.modal.groupName = '';
        $scope.model.form.modal.processUserCd = '';
        $scope.model.form.modal.userName = '';
        $scope.model.form.modal.alertDay = '';
        $scope.model.form.modal.iconNo = '';
        $scope.model.form.modal.iconBinaryData = '';
        $scope.model.form.modal.processExplain = '';
        $scope.model.form.modal.exportFileCd = '';

        $scope.model.form.modal.listDetailProcess = [];
        $scope.model.form.modal.listDetailProcess.push(itemTmp);
        $scope.model.hidden.isSubProcess = true;
        $scope.model.hidden.isDisabled = true;
        $scope.model.hidden.modalProcess.isControlType = false;
        $scope.model.hidden.modalProcess.isEXEX040508 = false;
    }

    //** temp
    $scope.addSubProcess = function(index){
        var itemTmp = {
            'orderId': '',
            'controlLabelName': '',
            'controlType': '',
            'listDataSource' : '',
            'requireFlag': '1',
            'editPermission':'1',
            'inputData': ''
        };

        $scope.model.hidden.isSubProcess = false;
        $scope.model.hidden.isDisabled = false;
        $scope.model.hidden.indexUpdate = index;
        $scope.model.form.modal = angular.extend({}, $scope.model.form.listProcess[index]);
        $scope.model.form.modal.processExplain = '';
        $scope.model.form.modal.listDetailProcess = [];
        $scope.model.form.modal.listDetailProcess.push(itemTmp);
    };

    $scope.editItemProcess = function(row, parentIndex, index){

        var options = {
            size: '1270'
        };
        DialogsService.showDialog('MstProcessManagement', 'MstProcessManagementDialogCtrl', {},options).result.then(function(param) { });

        $scope.model.hidden.indexUpdate = index;
        $scope.model.hidden.indexParent = parentIndex;
        $scope.model.hidden.isDisabled = false;
        $scope.model.hidden.isSubProcess = true;
        $scope.model.hidden.modalProcess.isControlType = false;
        $scope.model.hidden.modalProcess.isEXEX040508 = false;
        $scope.model.form.modal = angular.copy($scope.model.form.listProcess[parentIndex].listSubProcess[index]);
        if(!ValidateUtil.isValidTextEmpty($scope.model.form.modal.alertDay)){
            $scope.model.form.modal.alertDay = $scope.model.form.modal.alertDay.toString();
        }
        if(!ValidateUtil.isValidTextEmpty($scope.model.form.modal.referenceAuthority)){
            $scope.model.form.modal.referenceAuthority = $scope.model.form.modal.referenceAuthority.split(',');
        }
        var itemTmp = {
            'lineNo' : '',
            'positionNo': '',
            'controlLabelName': '',
            'controlType': '',
            'listDataSource' : '',
            'requireFlag': '1',
            'editPermission':'1',
            'inputData': '',
            'readOnly': false
        };
        if($scope.model.form.modal.listDetailProcess.length == 0){
            $scope.model.form.modal.listDetailProcess.push(itemTmp);
        }
    };

    $scope.removeItemProcess = function(parentIndex,index){
        if($scope.model.hidden.screenMode === 'INSERT'){
            DialogsService.showConfirm(Messages.getMessage('title.confirm'), Messages.getMessage('S00005')).result.then(function(btn){
                if($scope.model.form.listProcess[parentIndex].listSubProcess.length > 1){
                    $scope.model.form.listProcess[parentIndex].listSubProcess.splice(index, 1);
                }else{
                    $scope.model.form.listProcess.splice(parentIndex, 1);
                }
                $scope.onInsert();
            });
        }else{
            DialogsService.showConfirm(Messages.getMessage('title.confirm'), Messages.getMessage('S00005')).result.then(function(btn){
                if($scope.model.form.listProcess[parentIndex].listSubProcess.length > 1){
                    $scope.model.form.listProcess[parentIndex].listSubProcess.splice(index, 1);
                }else{
                    $scope.model.form.listProcess.splice(parentIndex, 1);
                }
                $scope.onUpdate();
            });
        }
    }

    /* select process add to group */
    $scope.selectProcess = function(index, row, selected){
        if(selected){
            $scope.model.hidden.listIndexAddGroup.push(index);
        }else{
            var i = $scope.model.hidden.listIndexAddGroup.indexOf(index);
            if(i != -1) {
                $scope.model.hidden.listIndexAddGroup.splice(i, 1);
            }
        }
    };

    /**
     * add process to group
     */
    $scope.addGroupOpen = function(isGroupUpdate){
        var options = {
            size: '800'
        };
        var params = {
            processGroupName: '',
            groupGroupCd: '',
            groupUserCd: '',
            iconNo: '',
            iconBinaryData : '',
            workflowFlag : false,
            isGroupUpdate : isGroupUpdate
        };
        DialogsService.showDialog('MstProcessGroup', 'MstProcessGroupDialogCtrl', params, options)
        .result.then(function(param) {

        });
        /*$scope.model.form.modalGroup.processGroupName = '';
        $scope.model.form.modalGroup.groupGroupCd = '';
        $scope.model.form.modalGroup.groupUserCd = '';
        $scope.model.form.modalGroup.iconNo = '';
        $scope.model.form.modalGroup.iconBinaryData = '';
        $scope.model.form.modalGroup.workflowFlag = false;
        $scope.model.hidden.isGroupUpdate = isGroupUpdate;*/
    };

    /**
     * edit group name
     */
    $scope.editGroupName = function(parentIndex, items, isGroupUpdate){
        var options = {
            size: '800'
        };
        var params = {
            processGroupName: items.processGroupName,
            groupGroupCd: items.groupGroupCd,
            groupUserCd: items.groupUserCd,
            iconNo: items.iconNo,
            iconBinaryData : items.iconBinaryData,
            workflowFlag : items.workflowFlag,
            isGroupUpdate : isGroupUpdate,
            indexGroupUpdate : parentIndex
        };
        DialogsService.showDialog('MstProcessGroup', 'MstProcessGroupDialogCtrl', params, options)
        .result.then(function(param) {

        });
        /*$scope.model.hidden.isGroupUpdate = isGroupUpdate;
        $scope.model.hidden.indexGroupUpdate = parentIndex;
        $scope.model.form.modalGroup.processGroupName = items.processGroupName;
        $scope.model.form.modalGroup.groupGroupCd = items.groupGroupCd;
        $scope.model.form.modalGroup.groupUserCd = items.groupUserCd;
        $scope.model.form.modalGroup.iconNo = items.iconNo;
        $scope.model.form.modalGroup.iconBinaryData = items.iconBinaryData;
        $scope.model.form.modalGroup.workflowFlag = items.workflowFlag;*/
        $scope.model.hidden.listIndexAddGroup = [];
    };

    /**
     * ungroup process
     */
    $scope.unGroup = function(parentIndex, processGroupName){
        DialogsService.showConfirm(Messages.getMessage('title.confirm'), Messages.getMessage('W00258')).result.then(function(btn){
            angular.forEach($scope.model.form.listProcess[parentIndex].listSubProcess, function(value, key){
                if(key != 0){
                    var param = {
                        id: key,
                        group : false,
                        processGroupName : '',
                        listSubProcess : [$scope.model.form.listProcess[parentIndex].listSubProcess[key]]
                    };
                    $scope.model.form.listProcess.splice(parentIndex + key, 0, param);
                    $scope.model.form.listProcess[parentIndex].processGroupName = '';
                    $scope.model.form.listProcess[parentIndex].iconNo = '';
                    $scope.model.form.listProcess[parentIndex].iconBinaryData = '';
                    $scope.model.form.listProcess[parentIndex].groupGroupCd = '';
                    $scope.model.form.listProcess[parentIndex].groupUserCd = '';
                    $scope.model.form.listProcess[parentIndex].groupGroupName = '';
                    $scope.model.form.listProcess[parentIndex].groupUserName = '';
                    $scope.model.form.listProcess[parentIndex].group = false;
                    $scope.model.form.modal.iconNo = '';
                }else{
                    $scope.model.form.listProcess[parentIndex].processGroupName = '';
                    $scope.model.form.listProcess[parentIndex].iconNo = '';
                    $scope.model.form.listProcess[parentIndex].iconBinaryData = '';
                    $scope.model.form.listProcess[parentIndex].groupGroupCd = '';
                    $scope.model.form.listProcess[parentIndex].groupUserCd = '';
                    $scope.model.form.listProcess[parentIndex].groupGroupName = '';
                    $scope.model.form.listProcess[parentIndex].groupUserName = '';
                    $scope.model.form.listProcess[parentIndex].group = false;
                    $scope.model.form.modal.iconNo = '';
                }
            });
            var listRemoveLength = $scope.model.form.listProcess[parentIndex].listSubProcess.length;
            $scope.model.form.listProcess[parentIndex].listSubProcess.splice(1, listRemoveLength - 1);
            if($scope.model.hidden.screenMode === 'INSERT'){
                $scope.onInsert();
            }else{
                $scope.onUpdate();
            }
        },function(btn){ });
    };

    $scope.convertData = function(business, listProcess){
        var params = {};
        params.businessCd = business.businessCd;
        params.businessName = business.businessName;
        params.isTemplate = business.isTemplate;
        params.status = $scope.model.hidden.status;
        var listProcessTmp = angular.copy(listProcess);
        params.listProcess = JSON.stringify(listProcessTmp);
        return params;
    };

    $scope.insertTmp = function(){
        $scope.model.hidden.status = '02';
    };

    $scope.insert = function(isInvalid){
        $scope.model.hidden.isSubmitted = true;
        if(isInvalid) {
            return;
        }
        DialogsService.showConfirm(Messages.getMessage('title.confirm'), Messages.getMessage('S00003')).result.then(function(btn){
            $scope.onInsert();
        });
    };

    $scope.onInsert = function(){
        var params = $scope.convertData($scope.model.form.business, $scope.model.form.listProcess);
        MstBusinessControlService.insert(params).then(
            function(result) {
                if(!ValidateUtil.isValidTextEmpty(result.data.warning)){
                    DialogsService.showError(Messages.getMessage('system.error'), result.data.failed);
                    return;
                }else if(!ValidateUtil.isValidTextEmpty(result.data.success)){
                    var business = {
                            businessCd :  result.data.businessCd,
                            businessName : result.data.businessName
                    };
                    sessionStorage.setItem("business", JSON.stringify(business));
                    DialogsService.showNotify(Messages.getMessage('title.info'), result.data.success).result.then(function(btn){
                        $scope.inquiry();
                    });
                }
                $scope.model.hidden.screenMode = 'UPDATE';
            }
        );
    };

    $scope.inquiry = function(){
        var params = angular.fromJson(sessionStorage.getItem("business"));
        MstBusinessControlService.inquiry(params).then(function(result) {
                if(!ValidateUtil.isValidTextEmpty(result.data.failed)){
                    DialogsService.showError(Messages.getMessage('system.error'), result.data.failed).result.then(function() {
                        sessionStorage.removeItem("business");
                        RouteService.gotoUrl('MstBusinessList');
                    });
                    return;
                }
                $scope.model.form.business = result.data.business;
                $scope.model.form.listProcess = result.data.listProcess;
                $scope.model.hidden.status = result.data.business.status;
                $scope.model.hidden.listIndexAddGroup = [];
                $scope.model.hidden.screenMode = 'UPDATE';
            }
        );
    };

    $scope.checkData = function(){
        var param = {
            businessCd : $scope.model.form.business.businessCd,
            businessName : $scope.model.form.business.businessName,
            version : $scope.model.form.business.version
        };
        MstBusinessControlService.checkData(param).then(
            function(result) {
                if(!ValidateUtil.isValidTextEmpty(result.data.warning)){
                    DialogsService.showError(Messages.getMessage('system.error'), result.data.warning).result.then(function() {
                        sessionStorage.removeItem("business");
                        RouteService.gotoUrl('MstBusinessList');
                    });
                    return;
                }
            }
        );
    };

    $scope.update = function(isInvalid){
        $scope.model.hidden.isSubmitted = true;
        if(isInvalid) {
            return;
        }
        DialogsService.showConfirm(Messages.getMessage('title.confirm'), Messages.getMessage('S00004')).result.then(function(btn){
            $scope.onUpdate(isInvalid);
        });
    };

    $scope.onUpdate = function(isInvalid){
        var params = $scope.convertData($scope.model.form.business, $scope.model.form.listProcess);
        MstBusinessControlService.update(params)
        .then(
            function(result) {
                if(!ValidateUtil.isValidTextEmpty(result.data.failed)){
                    DialogsService.showError(Messages.getMessage('system.error'), result.data.failed);
                    return;
                } else if(!ValidateUtil.isValidTextEmpty(result.data.warning)){
                    DialogsService.showWarning(Messages.getMessage('check.error'), result.data.warning);
                    return;
                }
                if(!ValidateUtil.isValidTextEmpty(isInvalid) && !isInvalid){
                    DialogsService.showNotify(Messages.getMessage('title.info'), result.data.success).result.then(function(btn){
                        $scope.model.hidden.screenMode = 'UPDATE';
                        $scope.inquiry();
                    });
                }else{
                    $scope.inquiry();
                }
            }
        );
    };

    $scope.deleteP = function(){
        var params = {
                businessCd : $scope.model.form.business.businessCd
        };
        DialogsService.showConfirm(Messages.getMessage('title.confirm'), Messages.getMessage('S00005')).result.then(function(btn){
            MstBusinessControlService.deleteServer(params).then(
                function(result) {
                    if(!ValidateUtil.isValidTextEmpty(result.data.failed)){
                        DialogsService.showError(Messages.getMessage('system.error'), result.data.failed);
                        return;
                    } else if(!ValidateUtil.isValidTextEmpty(result.data.warning)){
                        DialogsService.showWarning(Messages.getMessage('check.error'), result.data.warning);
                        return;
                    }
                    DialogsService.showNotify(Messages.getMessage('title.info'), result.data.success).result.then(function(btn){
                        sessionStorage.removeItem("business");
                        RouteService.gotoUrl('MstBusinessList');
                    });
                }
            );
        });
    };

    $scope.copy = function(){
        $scope.model.form.business.businessCd = '';
        $scope.model.hidden.screenMode = 'INSERT';
    };

    $scope.backList = function(){
        sessionStorage.removeItem("business");
        RouteService.gotoUrl('MstBusinessList');
    };

    $scope.$on("MstBUS#doInsert", function(evt, param) {
        $scope.onInsert();
    });

    $scope.$on("MstBUS#doUpdate", function(evt, param) {
        $scope.onUpdate();
    });

}]);

//Master Process Management Dialog Controller
exexSMSApp.controller('MstProcessManagementDialogCtrl',
        ['$rootScope', '$scope', '$uibModalInstance', 'MstBusinessControlModel', 'DialogsService', 'MstProcessManagementService', 'Messages',
    function($rootScope, $scope, $uibModalInstance, MstBusinessControlModel, DialogsService, MstProcessManagementService, Messages) {

    $scope.model = MstBusinessControlModel;

    $scope.init = function(){
        if(!ValidateUtil.isValidTextEmpty($scope.model.form.modal.processGroupCd)){
            $scope.getUserByGroup();
            $scope.selectControlType();
        }else{
            $scope.getInit();
        }
    };

    $scope.getInit = function(){
        MstProcessManagementService.initData({}).then(
            function(result) {
                $scope.model.form.listUser = result.data.listUser;
                $scope.model.form.listPS00001 = result.data.listPS00001;
            }
        );
    };

    $scope.getUserByGroup = function(){
        var param = {
            groupCd : $scope.model.form.modal.processGroupCd
        };
        MstProcessManagementService.getSgtUserByGroupCd(param).then(
            function(result) {
                $scope.model.form.listUser = result.data.listUser;
                $scope.model.form.listPS00001 = result.data.listPS00001;
            }
        );
    };

    $scope.addIcon = function(){
        var options = {
            size: '860'
        };
        $scope.model.hidden.isGroupIcon = false;
        DialogsService.showDialog('MstIconManagement', 'MstIconManagementDialogCtrl', {},options);
    };

    $scope.remveIcon = function(){
        $scope.model.form.modal.iconNo = '';
        $scope.model.form.modal.iconBinaryData = '';
    };

    $scope.addDetailProcess = function(){
        var lastIndex = $scope.model.form.modal.listDetailProcess.length;
        $scope.model.form.modal.listDetailProcess[lastIndex - 1].isSubmitted = true;
        if(!ValidateUtil.isValidTextEmpty($scope.model.form.modal.listDetailProcess[lastIndex - 1].controlLabelName) &&
            !ValidateUtil.isValidTextEmpty($scope.model.form.modal.listDetailProcess[lastIndex - 1].controlType) &&
            !ValidateUtil.isValidTextEmpty($scope.model.form.modal.listDetailProcess[lastIndex - 1].editPermission)){
            var itemTmp = {
                    'orderId': '',
                    'lineNo': '',
                    'controlLabelName': '',
                    'controlType': '',
                    'listDataSource': '',
                    'requireFlag': '1',
                    'editPermission':'1',
                    'inputData': '',
                    'isSubmitted' : false
            };
            $scope.model.form.modal.listDetailProcess.push(itemTmp);
            $('.tableList').animate({scrollTop:$('#tableList').height()}, 'slow');
        }
    };

    $scope.removeItem = function(index, row){
        if($scope.model.form.modal.listDetailProcess.length > 1){
            $scope.model.form.modal.listDetailProcess.splice(index, 1);
        }
        $scope.selectControlType();
    };

    // TODO
    //isEXEX040508
    $scope.selectControlType = function(index, controlType){

        var count = 0;
        var countEXEX04 = 0;
        var countEXEX05 = 0;
        var countEXEX08 = 0;
        var messageContent = '';
        var lengthListDetail = $scope.model.form.modal.listDetailProcess.length;
        angular.forEach($scope.model.form.modal.listDetailProcess, function(pItem, pKey){
            if(!ValidateUtil.isValidTextEmpty(pItem.controlType) && pItem.controlType.indexOf('EXEX') > -1){
                if(typeof index !== 'undefined' && index === pKey){
                    $scope.model.form.modal.listDetailProcess[index].editPermission = '1';
                }
                if(typeof index !== 'undefined' &&
                        ( pItem.controlType.indexOf('EXEX04') > -1 || pItem.controlType.indexOf('EXEX05') > -1 || pItem.controlType.indexOf('EXEX08') > -1)){
                    // workflow off when control type is EXEX04, EXEX05, EXEX08
                    $scope.model.form.modal.workflowFlag = false;
                    pItem.requireFlag = '';
                    $scope.model.hidden.modalProcess.isEXEX040508 = true;
                }else{
                    $scope.model.hidden.modalProcess.isEXEX040508 = false;
                }
                if(typeof index !== 'undefined' && lengthListDetail > 1 &&
                        (pItem.controlType.indexOf('EXEX04') > -1 || pItem.controlType.indexOf('EXEX05') > -1 || pItem.controlType.indexOf('EXEX08') > -1)){
                    $scope.model.hidden.modalProcess.isControlType = true;
                    messageContent = 'W00236';
                }

                // check if more than one of EXEX04.05.08
                if(typeof index !== 'undefined' && (pItem.controlType.indexOf('EXEX04') > -1)){
                    countEXEX04++;
                }
                if(typeof index !== 'undefined' && (pItem.controlType.indexOf('EXEX05') > -1)){
                    countEXEX05++;
                }
                if(typeof index !== 'undefined' && (pItem.controlType.indexOf('EXEX08') > -1)){
                    countEXEX08++;
                }
                var listProcess = angular.copy($scope.model.form.listProcess);
                listProcess.splice($scope.model.hidden.indexParent,1);
                if(pKey === 0){
                    angular.forEach(listProcess, function(item, key){
                        if(typeof index !== 'undefined'){
                            angular.forEach(item.listSubProcess[0].listDetailProcess, function(subItem, key){
                                if(subItem.controlType.indexOf('EXEX04') > -1){
                                    countEXEX04++;
                                }
                                if(subItem.controlType.indexOf('EXEX05') > -1){
                                    countEXEX05++;
                                }
                                if(subItem.controlType.indexOf('EXEX08') > -1){
                                    countEXEX08++;
                                }
                            });
                        }
                    });
                }
                if(countEXEX04 > 1 || countEXEX05 > 1 || countEXEX08 > 1){
                    $scope.model.hidden.modalProcess.isControlType = true;
                    messageContent = 'W00237';
                }

//                if(typeof index !== 'undefined' && item.controlType.indexOf('EXEX04') > -1 && $scope.model.hidden.modalProcess.isUniqueEXEX04){
//                    //$scope.model.hidden.modalProcess.isUniqueEXEX04 = true;
//                    $scope.model.hidden.modalProcess.isControlType = true;
//                    messageContent = 'W00237';
//                }else if(typeof index !== 'undefined' && item.controlType.indexOf('EXEX05') > -1 && $scope.model.hidden.modalProcess.isUniqueEXEX05){
//                    //$scope.model.hidden.modalProcess.isUniqueEXEX05 = true;
//                    $scope.model.hidden.modalProcess.isControlType = true;
//                    messageContent = 'W00237';
//                }else if(typeof index !== 'undefined' && item.controlType.indexOf('EXEX08') > -1 && $scope.model.hidden.modalProcess.isUniqueEXEX08){
//                    //$scope.model.hidden.modalProcess.isUniqueEXEX08 = true;
//                    $scope.model.hidden.modalProcess.isControlType = true;
//                    messageContent = 'W00237';
//                }

                //if process has group, can't change to EXEX04.05.08
                if( typeof index !== 'undefined' &&
                        !$scope.model.hidden.isDisabled && $scope.model.hidden.isSubProcess &&
                        !ValidateUtil.isValidTextEmpty($scope.model.form.listProcess[$scope.model.hidden.indexParent].group) &&
                        $scope.model.form.listProcess[$scope.model.hidden.indexParent].group &&
                        !ValidateUtil.isValidTextEmpty($scope.model.form.listProcess[$scope.model.hidden.indexParent].processGroupName) &&
                        (pItem.controlType.indexOf('EXEX04') > -1 || pItem.controlType.indexOf('EXEX05') > -1 || pItem.controlType.indexOf('EXEX08') > -1)){
                    $scope.model.hidden.modalProcess.isControlType = true;
                    messageContent = 'W00238';
                }

                //TODO check has more then EXEX in one process
                //count++;
                //if(count > 1){
                //    $scope.model.hidden.modalProcess.isControlType = true;
                //    messageContent = 'W00218';
                //}
            }else{
                $scope.model.hidden.modalProcess.isEXEX040508 = false;
            }
        });
        if(!ValidateUtil.isValidTextEmpty(messageContent)){
            DialogsService.showWarning(Messages.getMessage('check.error'),Messages.getMessage(messageContent));
        }else{
            $scope.model.hidden.modalProcess.isControlType = false;
        }
    };

    $scope.addNew = function(isInvalid){
        $scope.model.hidden.modalProcess.isSubmitted = true;
        if(isInvalid) {
            return;
        }

        var param = angular.extend({}, $scope.model.form.modal);

        delete param.listS010013;
        delete param.listP010003;

        var listDetailProcessTmp = [];
        angular.forEach(param.listDetailProcess, function(value, key){

            var controlTypeName = '';
            var listP010003Length = $scope.model.form.listP010003.length;
            for(var i = 0; i < listP010003Length; i++){
                if( value.controlType != '01' && value.controlType != '02'
                    && value.controlType != '03' && value.controlType != '04'
                    && value.controlType == $scope.model.form.listP010003[i].code){
                    controlTypeName = $scope.model.form.listP010003[i].codeName;
                    break;
                }
            }

            //TODO khi 設定 check EXEX04.05.08 check to TRUE
            if(!ValidateUtil.isValidTextEmpty(value.controlType) && value.controlType.indexOf('EXEX04') > -1){
                //$scope.model.hidden.modalProcess.isUniqueEXEX04 = true;
                $scope.model.hidden.modalProcess.isDisabledGroup = true;
                param.workflowFlag = false;
            }else if(!ValidateUtil.isValidTextEmpty(value.controlType) && value.controlType.indexOf('EXEX05') > -1){
                //$scope.model.hidden.modalProcess.isUniqueEXEX05 = true;
                $scope.model.hidden.modalProcess.isDisabledGroup = true;
                param.workflowFlag = false;
            }else if(!ValidateUtil.isValidTextEmpty(value.controlType) && value.controlType.indexOf('EXEX08') > -1){
                //$scope.model.hidden.modalProcess.isUniqueEXEX08 = true;
                $scope.model.hidden.modalProcess.isDisabledGroup = true;
                param.workflowFlag = false;
            }else{
                $scope.model.hidden.modalProcess.isDisabledGroup = false;
            }

            if(!ValidateUtil.isValidTextEmpty(value.controlLabelName)
                && !ValidateUtil.isValidTextEmpty(value.controlType)
                && !ValidateUtil.isValidTextEmpty(value.editPermission)){
                var requireFlag = '';
                if(ValidateUtil.isValidTextEmpty(value.requireFlag)){
                    requireFlag = '0';
                }else{
                    requireFlag = value.requireFlag;
                }

                var itemTmp = {
                    lineNo : value.lineNo,
                    positionNo : key + 1,
                    controlLabelName : value.controlLabelName,
                    controlType : value.controlType,
                    controlTypeName : controlTypeName,
                    listDataSource : value.listDataSource,
                    requireFlag : requireFlag,
                    editPermission : value.editPermission,
                    referenceTable : value.referenceTable,
                    referenceInput : value.referenceInput,
                    readOnly: value.readOnly
                }
                listDetailProcessTmp.push(itemTmp);
            }
        });

        if(listDetailProcessTmp.length === 0){
            DialogsService.showWarning(Messages.getMessage('check.error'), Messages.getMessage('W00046'));
            return;
        }

        param.listDetailProcess = [];
        param.listDetailProcess = listDetailProcessTmp;

        var groupName = '';
        var listMstGroupLength = $scope.model.form.listMstGroup.length;
        for(var i = 0; i < listMstGroupLength; i++){
            if( param.processGroupCd == $scope.model.form.listMstGroup[i].groupCd){
                groupName = $scope.model.form.listMstGroup[i].groupName;
                break;
            }
        }
        var userName = '';
        var listUserLength = $scope.model.form.listUser.length;
        for(var i = 0; i < listUserLength; i++){
            if( param.processUserCd == $scope.model.form.listUser[i].userCd){
                userName = $scope.model.form.listUser[i].userName;
                break;
            }
        }
        param.groupName = groupName;
        param.userName = userName;

        if(!ValidateUtil.isValidTextEmpty(param.referenceAuthority)){
            angular.forEach(param.referenceAuthority, function(value, key){
                if(value === '1'){
                    param.processGroupRead = '01';
                }else if (value === '2'){
                    param.processUserRead = '01';
                }else if(value === '3'){
                    param.accountCd = '01';
                }
            });
            param.referenceAuthority = param.referenceAuthority.toString();
        }else{
            param.referenceAuthority = '';
            param.processGroupRead = '00';
            param.processUserRead = '00';
            param.accountCd = '00';
        }

        if($scope.model.hidden.screenMode === 'INSERT'){
            DialogsService.showConfirm(Messages.getMessage('title.confirm'), Messages.getMessage('S00003')).result.then(function(btn){
                // add new process
                if($scope.model.hidden.isDisabled && $scope.model.hidden.isSubProcess){
                    $scope.model.form.listSubProcess.push(param);
                    var listSubProcess = {
                        id: 1,
                        group : false,
                        isDisabledGroup : $scope.model.hidden.modalProcess.isDisabledGroup,
                        processGroupName : '',
                        listSubProcess : $scope.model.form.listSubProcess
                    }
                    $scope.model.form.listProcess.splice($scope.model.hidden.indexPushListProcess + 1, 0, listSubProcess);
                    $scope.model.form.listSubProcess = [];
                    listSubProcess = {};
                }
                // add sub process
                if(!$scope.model.hidden.isDisabled && !$scope.model.hidden.isSubProcess){
                    param.subProcess = true;
                    $scope.model.form.listProcess.splice($scope.model.hidden.indexUpdate + 1, 0, param);
                }
                // update
                if(!$scope.model.hidden.isDisabled && $scope.model.hidden.isSubProcess){
                    $scope.model.form.listProcess[$scope.model.hidden.indexParent].listSubProcess[$scope.model.hidden.indexUpdate] = param;
                    $scope.model.form.listProcess[$scope.model.hidden.indexParent].isDisabledGroup = $scope.model.hidden.modalProcess.isDisabledGroup;
                }
                $scope.model.hidden.modalProcess.isSubmitted = false;
                $scope.model.hidden.modalProcess.isDisabledGroup = false;

                $uibModalInstance.dismiss('close');
                $rootScope.$broadcast("MstBUS#doInsert",{});
            });
        }else{
            DialogsService.showConfirm(Messages.getMessage('title.confirm'), Messages.getMessage('S00004')).result.then(function(btn){
                // add new process
                if($scope.model.hidden.isDisabled && $scope.model.hidden.isSubProcess){
                    $scope.model.form.listSubProcess.push(param);
                    var listSubProcess = {
                        id: 1,
                        group : false,
                        isDisabledGroup : $scope.model.hidden.modalProcess.isDisabledGroup,
                        processGroupName : '',
                        listSubProcess : $scope.model.form.listSubProcess
                    }
                    $scope.model.form.listProcess.splice($scope.model.hidden.indexPushListProcess + 1, 0, listSubProcess);
                    $scope.model.form.listSubProcess = [];
                    listSubProcess = {};
                }
                // add sub process
                if(!$scope.model.hidden.isDisabled && !$scope.model.hidden.isSubProcess){
                    param.subProcess = true;
                    $scope.model.form.listProcess.splice($scope.model.hidden.indexUpdate + 1, 0, param);
                }
                // update
                if(!$scope.model.hidden.isDisabled && $scope.model.hidden.isSubProcess){
                    $scope.model.form.listProcess[$scope.model.hidden.indexParent].listSubProcess[$scope.model.hidden.indexUpdate] = param;
                    $scope.model.form.listProcess[$scope.model.hidden.indexParent].isDisabledGroup = $scope.model.hidden.modalProcess.isDisabledGroup;
                }
                $scope.model.hidden.modalProcess.isSubmitted = false;
                $scope.model.hidden.modalProcess.isDisabledGroup = false;

                $uibModalInstance.dismiss('close');
                $rootScope.$broadcast("MstBUS#doUpdate",{});
            });
        }
    }

    $scope.close = function() {
        $uibModalInstance.dismiss('close');
    };
}]);

//Master Icon Management Dialog Controller
exexSMSApp.controller('MstIconManagementDialogCtrl',
        ['$rootScope', '$scope', '$uibModalInstance', 'MstBusinessControlModel','MstIconManagementService', 'Messages',
         function($rootScope, $scope, $uibModalInstance, MstBusinessControlModel,MstIconManagementService, Messages) {

    $scope.model = MstBusinessControlModel;

    $scope.init = function(){
        $scope.getInit();
    };

    $scope.getInit = function(){
        MstIconManagementService.initData({}).then(
            function(result) {
                $scope.model.form.listIcon = result.data.listIcon;
            }
        );
    };

    $scope.selectIcon = function(item){
        if($scope.model.hidden.isGroupIcon){
            $scope.model.form.modalGroup.iconNo = item.iconNo;
            $scope.model.form.modalGroup.iconBinaryData = item.iconBinaryData;
        }else{
            $scope.model.form.modal.iconNo = item.iconNo;
            $scope.model.form.modal.iconBinaryData = item.iconBinaryData;
        }
        $uibModalInstance.dismiss('close');
    };

    $scope.close = function() {
        $uibModalInstance.dismiss('close');
    };
}]);

//MstProcessGroupDialogCtrl
exexSMSApp.controller('MstProcessGroupDialogCtrl',
        ['$rootScope', '$scope', '$uibModalInstance', 'MstBusinessControlModel','DialogsService', 'MstProcessGroupService', 'Messages', 'data',
         function($rootScope, $scope, $uibModalInstance, MstBusinessControlModel,DialogsService, MstProcessGroupService, Messages, data) {

    $scope.model = MstBusinessControlModel;

    $scope.model.form.modalGroup.processGroupName = data.processGroupName;
    $scope.model.form.modalGroup.groupGroupCd = data.groupGroupCd;
    $scope.model.form.modalGroup.groupUserCd = data.groupUserCd;
    $scope.model.form.modalGroup.iconNo = data.iconNo;
    $scope.model.form.modalGroup.iconBinaryData = data.iconBinaryData;
    $scope.model.form.modalGroup.workflowFlag = data.workflowFlag;
    $scope.model.hidden.isGroupUpdate = data.isGroupUpdate;
    $scope.model.hidden.indexGroupUpdate = data.indexGroupUpdate;

    $scope.addGroupName = function(){
        if($scope.model.hidden.screenMode === 'INSERT'){
            DialogsService.showConfirm(Messages.getMessage('title.confirm'), Messages.getMessage('S00003'))
            .result.then(function(btn){
                $scope.doAddGroupName();
                $uibModalInstance.close();
                $rootScope.$broadcast("MstBUS#doInsert",{});
            });
        }else{
            DialogsService.showConfirm(Messages.getMessage('title.confirm'), Messages.getMessage('S00004'))
            .result.then(function(btn){
                $scope.doAddGroupName();
                $uibModalInstance.close();
                $rootScope.$broadcast("MstBUS#doUpdate",{});
            });
        }
    };

    $scope.doAddGroupName = function(){
        var groupGroupName = '';
        if(!ValidateUtil.isValidTextEmpty($scope.model.form.modalGroup.groupGroupCd)){
            var listMstGroupLength = $scope.model.form.listMstGroup.length;
            for(var i = 0; i < listMstGroupLength; i++){
                if( $scope.model.form.modalGroup.groupGroupCd === $scope.model.form.listMstGroup[i].groupCd){
                    groupGroupName = $scope.model.form.listMstGroup[i].groupName;
                    break;
                }
            }
        }
        var groupUserName = '';
        if(!ValidateUtil.isValidTextEmpty($scope.model.form.modalGroup.groupUserCd)){
            var listUserLength = $scope.model.form.listUser.length;
            for(var i = 0; i < listUserLength; i++){
                if( $scope.model.form.modalGroup.groupUserCd === $scope.model.form.listUser[i].userCd){
                    groupUserName = $scope.model.form.listUser[i].userName;
                    break;
                }
            }
        }

        if(!$scope.model.hidden.isGroupUpdate){
            var indexGroupCanAdd = $scope.model.hidden.listIndexAddGroup.sort()[0];
            var count = 0;
            if($scope.model.hidden.listIndexAddGroup.length > 0){
                angular.forEach($scope.model.form.listProcess, function(value, key){
                    if(value.group && ValidateUtil.isValidTextEmpty(value.processGroupName)){
                        if(count != 0 ){
                            $scope.model.form.listProcess[indexGroupCanAdd].listSubProcess.push(value.listSubProcess[0]);
                        }
                        count++;
                    }
                });
                $scope.model.hidden.listIndexAddGroup.splice(0, 1);
                $scope.model.hidden.listIndexAddGroup.reverse();
                angular.forEach($scope.model.hidden.listIndexAddGroup, function(value, key){
                    $scope.model.form.listProcess.splice(value, 1);
                });
            }
            $scope.model.form.listProcess[indexGroupCanAdd].processGroupName = $scope.model.form.modalGroup.processGroupName;
            $scope.model.form.listProcess[indexGroupCanAdd].groupGroupCd = $scope.model.form.modalGroup.groupGroupCd;
            $scope.model.form.listProcess[indexGroupCanAdd].groupGroupName = groupGroupName;
            $scope.model.form.listProcess[indexGroupCanAdd].groupUserCd = $scope.model.form.modalGroup.groupUserCd;
            $scope.model.form.listProcess[indexGroupCanAdd].groupUserName = groupUserName;
            $scope.model.form.listProcess[indexGroupCanAdd].iconNo = $scope.model.form.modalGroup.iconNo;
            $scope.model.form.listProcess[indexGroupCanAdd].iconBinaryData = $scope.model.form.modalGroup.iconBinaryData;
            $scope.model.form.listProcess[indexGroupCanAdd].workflowFlag = $scope.model.form.modalGroup.workflowFlag;
            $scope.model.hidden.listIndexAddGroup = [];
        }else{
            $scope.model.form.listProcess[$scope.model.hidden.indexGroupUpdate].processGroupName = $scope.model.form.modalGroup.processGroupName;
            $scope.model.form.listProcess[$scope.model.hidden.indexGroupUpdate].groupGroupCd = $scope.model.form.modalGroup.groupGroupCd;
            $scope.model.form.listProcess[$scope.model.hidden.indexGroupUpdate].groupGroupName = groupGroupName;
            $scope.model.form.listProcess[$scope.model.hidden.indexGroupUpdate].groupUserCd = $scope.model.form.modalGroup.groupUserCd;
            $scope.model.form.listProcess[$scope.model.hidden.indexGroupUpdate].groupUserName = groupUserName;
            $scope.model.form.listProcess[$scope.model.hidden.indexGroupUpdate].iconNo = $scope.model.form.modalGroup.iconNo;
            $scope.model.form.listProcess[$scope.model.hidden.indexGroupUpdate].iconBinaryData = $scope.model.form.modalGroup.iconBinaryData;
            $scope.model.form.listProcess[$scope.model.hidden.indexGroupUpdate].workflowFlag = $scope.model.form.modalGroup.workflowFlag;
        }
    };

    $scope.addIcon = function(){
        var options = {
            size: '860'
        };
        $scope.model.hidden.isGroupIcon = true;
        DialogsService.showDialog('MstIconManagement', 'MstIconManagementDialogCtrl', {}, options);
    };

    $scope.remveIcon = function(){
        $scope.model.form.modalGroup.iconNo = '';
        $scope.model.form.modalGroup.iconBinaryData = '';
    };

    $scope.close = function() {
        $uibModalInstance.dismiss('close');
    };


    $scope.init = function(){
        if(!ValidateUtil.isValidTextEmpty($scope.model.form.modalGroup.groupGroupCd)){
            $scope.getUserByGroup();
        }else{
            $scope.getInit();
        }
    };

    $scope.getInit = function(){
        MstProcessGroupService.initData({}).then(
            function(result) {
                $scope.model.form.listUser = result.data.listUser;
            }
        );
    };

    $scope.getUserByGroup = function(){
        var param = {
                groupCd : $scope.model.form.modalGroup.groupGroupCd
        };
        MstProcessGroupService.getSgtUserByGroupCd(param).then(
            function(result) {
                $scope.model.form.listUser = result.data.listUser;
                $scope.model.form.listPS00001 = result.data.listPS00001;
            }
        );
    };

    $scope.init();

}]);
