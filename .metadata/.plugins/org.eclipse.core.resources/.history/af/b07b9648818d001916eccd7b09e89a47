/**
 * Copyright(c) SystemEXE corp. All Rights Reserved.
 */
/**
 *
 * @version $Revision:  $  $Date:  $
 * @author Quang Thien
 */
'use strict';

exexSMSApp.filter('startFrom', function() {
    return function(input, start) {
        if(input) {
            start = +start; //parse to int
            return input.slice(start);
        }
        return [];
    };
});

exexSMSApp.filter('tel', function () {
    return function (tel) {
        if (!tel) {
            return '';
        }
        if(!ValidateUtil.isValidTextEmpty(tel)){
            var value = tel.toString().trim().replace(/^\+/, '');

            if (value.match(/[^0-9-]/)) {
                return tel;
            }
            var number;
            switch (value.length) {
                case 15: // ######-####-#### ->#####-####-####
                    number = value;
                    break;
                default:
                    return "TEL :" + tel;
            }
            return "TEL :" + number.trim();
        }
    };
});

exexSMSApp.filter('fax', function () {
    return function (tel) {
        if (!tel) {
            return '';
        }
        if(!ValidateUtil.isValidTextEmpty(tel)){
            var value = tel.toString().trim().replace(/^\+/, '');

            if (value.match(/[^0-9-]/)) {
                return tel;
            }
            var number;
            switch (value.length) {
                case 15: // ######-####-#### ->#####-####-####
                    number = value;
                    break;
                default:
                    return "FAX :" + tel;
            }
            return "FAX :" + number.trim();
        }
    };
});

exexSMSApp.filter('post', function () {
    return function (tel) {
        if (!tel) {
            return '';
        }
        if(!ValidateUtil.isValidTextEmpty(tel)){
            var value = tel.toString().trim().replace(/^\+/, '');

            if (value.match(/[^0-9-]/)) {
                return tel;
            }
            var number;
            switch (value.length) {
                case 7: // ####### ->###-####
                    number = value.slice(0, 3) + '-' + value.slice(3);
                    break;
                case 10: // ########## ->###-###-####
                    number = value.slice(0, 3) + '-' + value.slice(3,6) + '-' + value.slice(6);
                    break;
                case 13: // ############# ->#####-####-####
                    number = value.slice(0, 5) + '-' + value.slice(5,9) + '-' + value.slice(9);
                    break;
                default:
                    return number = tel;
            }
            return "〒" + number.trim();
        }
    };
});


exexSMSApp.filter('currency', function () {
    return function (currency) {
        if(!ValidateUtil.isValidTextEmpty(currency)){
            return currency + "　百万円";
        }else {
            return currency;
        }
    };
});

exexSMSApp.filter("exexCurrency", function (numberFilter){

    function isNumeric(value){
      return (!isNaN(parseFloat(value)) && isFinite(value));
    }

    return function (inputNumber, currencySymbol, decimalSeparator, thousandsSeparator, decimalDigits) {
        if (isNumeric(inputNumber)){
            // Default values for the optional arguments
            currencySymbol = (typeof currencySymbol === "undefined") ? "" : currencySymbol;
            decimalSeparator = (typeof decimalSeparator === "undefined") ? "." : decimalSeparator;
            thousandsSeparator = (typeof thousandsSeparator === "undefined") ? "," : thousandsSeparator;
            decimalDigits = (typeof decimalDigits === "undefined" || !isNumeric(decimalDigits)) ? 0 : decimalDigits;

            if (decimalDigits < 0){
                decimalDigits = 0;
            }

            // Format the input number through the number filter
            // The resulting number will have "," as a thousands separator
            // and "." as a decimal separator.
            var formattedNumber = numberFilter(inputNumber, decimalDigits);

            // Extract the integral and the decimal parts
            var numberParts = formattedNumber.split(".");

            // Replace the "," symbol in the integral part
            // with the specified thousands separator.
            numberParts[0] = numberParts[0].split(",").join(thousandsSeparator);

            // Compose the final result
            var result = numberParts[0] + currencySymbol;

            if (numberParts.length == 2) {
                if(!StringUtils.isEmpty(numberParts[1]) && parseFloat(numberParts[1]) > 0){
                    result += decimalSeparator + numberParts[1];
                }
            }

            return result;
        } else {
            return inputNumber;
        }
    };
});

exexSMSApp.filter('person', function () {
    return function (person) {
        if(!ValidateUtil.isValidTextEmpty(person)){
            return person + "　名";
        }else {
            return person;
        }
    };
});

exexSMSApp.filter('percent', function () {
    return function (value) {
        if(!ValidateUtil.isValidTextEmpty(value)){
            return value + "%";
        }else {
            return value;
        }
    };
});


exexSMSApp.filter('split', function() {
    return function(input, splitChar, splitIndex) {
        // do some bounds checking here to ensure it has that index
        return input.split(splitChar)[splitIndex];
    }
});


exexSMSApp.filter('formatChartDate', function() {
    return function(input, format) {
        if(undefined != format && null != format){
            switch (format) {
            case 'MM/DD':
                var date = new Date(input);
                var month = (date.getMonth() + 1).toString();
                var day = date.getDate().toString();
                input = month + '/' + day;
                break;
            }
        }
        return input;
    }
});

exexSMSApp.filter('getDay', function () {
    return function (date) {
        if(!ValidateUtil.isValidTextEmpty(date)){
            var d = new Date(date);
            var dates = {
                    ja: { daysShort : ["日","月","火","水","木","金","土"] },
                    en: { daysShort : ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"] },
                    vi: { daysShort : ["CN","T2","T3","T4","T5","T6","T7"] }
                };
            return date + " (" + dates[locale].daysShort[d.getDay()] +")";
        };
    };
});

exexSMSApp.filter('custStockFormatLable', function () {
    return function (label, custType) {
        if(!ValidateUtil.isValidTextEmpty(label)){
            label = label.split('/');
            if(label.length > 1){
                if(custType == 0){
                    return label[0];
                }
                return label[1];
            }
            return label[0];
        }
        return label;
    };
});

exexSMSApp.filter('encodeUrl', function () {
    return function (param) {
        if(!StringUtils.isEmpty(param)){
            param = encodeURIComponent(param)
        }
        return param;
    };
});
