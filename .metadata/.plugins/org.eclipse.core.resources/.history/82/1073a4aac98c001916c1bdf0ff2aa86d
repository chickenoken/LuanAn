/**
 * Copyright(c) SystemEXE corp. All Rights Reserved.
 */
/**
 *
 * @version $Revision:  $  $Date:  $
 * @author : quang-tung
 */
'use strict';

exexSMSApp.factory('MstSubProjectSettingModel', ['BaseModel', function (BaseModel) {
    var model = BaseModel.getInstance();
    model.form = {
        listA050002: [],
        listMstCode: [],
    };
    model.listColorPopover = ColorUtils.getListColor();
    model.hidden = {
        isSubmited: false,
        hideControl: false,
        freeLabel: {}
    };

    return model;
}]);

exexSMSApp.controller('MstSubProjectSettingCtrl', ['$scope', 'MstSubProjectSettingModel', 'DialogsService', 'Messages', 'ServerService',
    function ($scope, MstSubProjectSettingModel, DialogsService, Messages, ServerService) {

    $scope.model = MstSubProjectSettingModel;
    $scope.selectedComponents = [];
    $scope.isOpen = [];

    /**初期*/
    $scope.init = function () {
        $scope.getInit();
    };

    $scope.loadInitJsEvent = function(row, index, event){
        //Save color
        var currColor = row.backgroundColor;
        if(!StringUtils.isEmpty(event)){
            currColor = $(event.target).css('color');
        }
        row.backgroundColor = currColor;
        //Add color effect to button
        $('#eventColor').css({"background-color": currColor, "border-color": currColor});
        $('.popover').remove();
        angular.element('body').click();
    };

    $scope.showPopover = function(index, listIndex) {
        for(var i = 0; i < $scope.model.form.listSubProject0.length; i++){
            if(i == index && listIndex == 0){
                $scope.model.form.listSubProject0[i].opened = true;
            }else{
                $scope.model.form.listSubProject0[i].opened = false;
            }
        }
        for(var i = 0; i < $scope.model.form.listSubProject1.length; i++){
            if(i == index && listIndex == 1){
                $scope.model.form.listSubProject1[i].opened = true;
            }else{
                $scope.model.form.listSubProject1[i].opened = false;
            }
        }
        for(var i = 0; i < $scope.model.form.listSubProject2.length; i++){
            if(i == index && listIndex == 2){
                $scope.model.form.listSubProject2[i].opened = true;
            }else{
                $scope.model.form.listSubProject2[i].opened = false;
            }
        }
    };

    $scope.convertListView = function (list) {
        angular.forEach(list, function (group, i) {
            group.locale = group.locale ? group.locale.split("#") : ['ja', 'vi'];
            group.groupLabelName = group.groupLabelName ? group.groupLabelName.split("#") : [group.groupLabelName];
        });
        return list;
    }

    $scope.convertListDetailView = function(list){
        angular.forEach(list, function(detail, i){
            detail.controlLabelName = detail.controlLabelName ? detail.controlLabelName.split("#") : [detail.controlLabelName];
            detail.locale = detail.locale ? detail.locale.split("#") : ['ja', 'vi'];
        });
        return list;
    };

    $scope.convertListUpdate = function (list) {
        var listTmp = angular.copy(list);
        angular.forEach(listTmp, function (group, i) {
            group.locale = group.locale.join("#");
            if (!StringUtils.isEmpty(group.groupLabelName[0]) && StringUtils.isEmpty(group.groupLabelName[1])) {
                group.groupLabelName[1] = group.groupLabelName[0];
            }
            if (!StringUtils.isEmpty(group.groupLabelName[1]) && StringUtils.isEmpty(group.groupLabelName[0])) {
                group.groupLabelName[0] = group.groupLabelName[1];
            }
            group.groupLabelName = group.groupLabelName.join("#");
            delete group.opened;
        });
        return listTmp;
    }

    $scope.getInit = function () {
        var param = {};
        ServerService.doPost('MstSubProjectSetting/getInit', param).then(
            function (okResult) {
                var error = okResult.data.failed;
                var warning = okResult.data.warning;
                if (!ValidateUtil.isValidTextEmpty(error)) {
                    DialogsService.showError(Messages.getMessage('system.error'), error);
                    return;
                } else if (!ValidateUtil.isValidTextEmpty(warning)) {
                    DialogsService.showWarning(Messages.getMessage('check.error'), warning);
                    return;
                }
                $scope.oneAtATime = true;
                $scope.model.form.listSubProject0 = $scope.convertListView(okResult.data.listSubProject0);
                $scope.model.form.listSubProject1 = $scope.convertListView(okResult.data.listSubProject1);
                $scope.model.form.listSubProject2 = $scope.convertListView(okResult.data.listSubProject2);
                var sessionLogin = angular.fromJson(sessionStorage.getItem("session"));
                $scope.model.hidden.locale = sessionLogin.locale;

                // get free label from session
                $scope.model.hidden.freeLabel = angular.fromJson(sessionStorage.getItem("freeLabel"));
            }
        );
    }

    /**add new Project item setting*/
    $scope.addItem = function (position, mode, item, index) {
        $('.popover').remove();
        var options = {
            size: '1350'
        };
        var param = {
            position: position,
            index: index + 1
        }
        if ((position == 0 || position == 1) && mode == "add") {
            param.item = null;
        } else if ((position == 0 || position == 1 || position == 2) && mode == "update") {
            param.item = item;
        }
        DialogsService.showDialog('MstSubProjectSetting/subProjectSettingPopup', 'subProjectCtrl', param, options)
        .result.then(function () {
            for (var i = 0; i < $scope.isOpen.length; i++) {
                $scope.isOpen[i] = false;
            }
            $scope.getInit();
        });
    };

    $scope.removeItem = function (index) {
        $scope.selectedComponents.splice(index, 1);
    };

    /**更新*/
    $scope.update = function (formInvalid) {
        $scope.model.hidden.isSubmited = true;
        if (formInvalid) {
            return;
        }
        DialogsService.showConfirm(Messages.getMessage('title.confirm'), Messages.getMessage('S00004'))
        .result.then(function (btn) {
            var listUpdate = [];
            angular.forEach($scope.model.form.listSubProject0, function (item, i) {
                delete item.isOpen;
                listUpdate.push(item);
            });
            angular.forEach($scope.model.form.listSubProject1, function (item, i) {
                delete item.isOpen;
                listUpdate.push(item);
            });
            angular.forEach($scope.model.form.listSubProject2, function (item, i) {
                delete item.isOpen;
                listUpdate.push(item);
            });
            listUpdate = $scope.convertListUpdate(listUpdate);
            var param = {
                listSubProjectDetail: listUpdate,
                updateMode: "UPDATE"
            }
            ServerService.doPost('MstSubProjectSetting/update', param).then(
                function (okResult) {
                    var error = okResult.data.failed;
                    var warning = okResult.data.warning;
                    var success = okResult.data.success;
                    if (!ValidateUtil.isValidTextEmpty(error)) {
                        DialogsService.showError(Messages.getMessage('system.error'), error);
                        return;
                    } else if (!ValidateUtil.isValidTextEmpty(warning)) {
                        DialogsService.showWarning(Messages.getMessage('check.error'), warning);
                        return;
                    } else if (!ValidateUtil.isValidTextEmpty(success)) {
                        DialogsService.showNotify(Messages.getMessage('title.info'), success)
                        $scope.getInit();
                        return;
                    }
                }
            );
        });
    };

    $scope.changeDisplay = function (index, value, mode) {
        if (mode == 0) {
            $scope.model.form.listSubProject0[index].groupControlDisplayFlag = !value;
        } else if (mode == 1) {
            $scope.model.form.listSubProject1[index].groupControlDisplayFlag = !value;
        } else {
            $scope.model.form.listSubProject2[index].groupControlDisplayFlag = !value;
        }
    }

    $scope.sortableConfig = {
        handle: '.handle',
    };

    $scope.showComponentList = function () {
        var options = {
            size: '600'
        };
        DialogsService.showDialog('MstCustomerItemSetting/MstDetailItemList', 'detailListCtrl', null, options);
    };

    $scope.showItemSubProjectList = function(groupNo, groupFreeItemFlag){
        var param = {
            groupNo : groupNo,
            groupFreeItemFlag : groupFreeItemFlag
        }
        ServerService.doPost('MstSubProjectSetting/detailSubProjectList', param).then(
            function(okResult) {
                var error = okResult.data.failed;
                var warning =  okResult.data.warning;
                if(!ValidateUtil.isValidTextEmpty(error)){
                    DialogsService.showError(Messages.getMessage('system.error'), error);
                    return;
                }else if(!ValidateUtil.isValidTextEmpty(warning)){
                    DialogsService.showWarning(Messages.getMessage('check.error'), warning);
                    return;
                }
                if(okResult.data.listSubProjectDetail.length > 0) {
                    if(okResult.data.listSubProjectDetail[0].displayPosition == '0') {
                        $scope.model.form.listSubProjectDetail0 = $scope.convertListDetailView(okResult.data.listSubProjectDetail);
                    } else if(okResult.data.listSubProjectDetail[0].displayPosition == '1') {
                        $scope.model.form.listSubProjectDetail1 = $scope.convertListDetailView(okResult.data.listSubProjectDetail);
                    } else if(okResult.data.listSubProjectDetail[0].displayPosition == '2') {
                        $scope.model.form.listSubProjectDetail2 = $scope.convertListDetailView(okResult.data.listSubProjectDetail);
                    }
                }
            }
        );
    }

    $scope.init();
}])

exexSMSApp.controller('detailListCtrl', ['$scope', '$uibModalInstance', 'MstSubProjectSettingModel', 'Messages', 'ServerService', 'DialogsService',
    function ($scope, $uibModalInstance, MstSubProjectSettingModel, Messages, ServerService, DialogsService) {

    $scope.modelParent = MstSubProjectSettingModel;

    $scope.init = function () {
        var param = {}
        ServerService.doPost('MstSubProjectSetting/getMstSubProjectDetailList', param).then(
            function (okResult) {
                var error = okResult.data.failed;
                var warning = okResult.data.warning;
                if (!ValidateUtil.isValidTextEmpty(error)) {
                    DialogsService.showError(Messages.getMessage('system.error'), error);
                    return;
                } else if (!ValidateUtil.isValidTextEmpty(warning)) {
                    DialogsService.showWarning(Messages.getMessage('check.error'), warning);
                    return;
                }
                $scope.listDetail = okResult.data.mstSubProjectDetailList;
                $scope.modelParent.form.listS020020 = okResult.data.listS020020;
            }
        );
    };
    $scope.init();

    $scope.close = function () {
        $uibModalInstance.dismiss('close');
    };

    $scope.ok = function () {
        var param = {
            listDetail: $scope.listDetail
        }
        DialogsService.showConfirm(Messages.getMessage('title.confirm'), Messages.getMessage('S00004'))
        .result.then(function (btn) {
            ServerService.doPost('MstSubProjectSetting/updateMstSubProjectDetail', param).then(
                function (okResult) {
                    var error = okResult.data.failed;
                    var warning = okResult.data.warning;
                    var success = okResult.data.success;
                    if (!ValidateUtil.isValidTextEmpty(error)) {
                        DialogsService.showError(Messages.getMessage('system.error'), error);
                        return;
                    } else if (!ValidateUtil.isValidTextEmpty(warning)) {
                        DialogsService.showWarning(Messages.getMessage('check.error'), warning);
                        return;
                    } else if (!ValidateUtil.isValidTextEmpty(success)) {
                        DialogsService.showNotify(Messages.getMessage('title.info'), success).result.then(function (btn) {
                            $uibModalInstance.dismiss('close');
                        });
                    }
                }
            );
        });
    };
}]);