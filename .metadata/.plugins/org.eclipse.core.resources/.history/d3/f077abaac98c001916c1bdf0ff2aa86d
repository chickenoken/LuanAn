/**
 * Copyright(c) SystemEXE corp. All Rights Reserved.
 */
/**
 * @author quang-tung
 * @version $Revision:  $  $Date:  $
 */
'use strict';

exexSMSApp.factory('AccountsReceivableListModel', [ 'BaseModel', function(BaseModel) {

    var model = BaseModel.getInstance();
    model.form = {
        search : {
            payCloseDate : '',
            billaddressName : '',
            billaddressNo : [],
            custName : '',
            custCd : [],
            salesPricePeriodConditionFrom: '',
            salesPricePeriodConditionTo: '',
            isHaveNoTransaction : true,
            searchOrderKey : [],
            searchOrderSort: '',
            exportExcel : ''
        },
        paginationInfo : {
            page: 0,
            pageSize: 20,
            totalPage: 0,
            totalRecord: 0,
            from: 0,
            to: 0
        },
        listL010023 : []
    };

    model.hidden = {
        isSubmitted : false,
        listParamSearch : [
            {id: 1, model: 'payCloseDate', name: angular.element('#payCloseDateLabel').text()},
            {id: 2, model: 'billaddressName', name: angular.element('#billaddressNameLabel').text()},
            {id: 3, model: 'billaddressNo', name: angular.element('#billaddressNoLabel').text()},
            {id: 4, model: 'custName', name: angular.element('#custNameLabel').text()},
            {id: 5, model: 'custCd', name: angular.element('#custCdLabel').text()},
            {id: 6, model: 'salesPricePeriodCondition', name: angular.element('#salesPricePeriodCondition').text()}
        ],
        searchOrderKey : [
            {id: 1, model: 'billaddressName', name: angular.element('#billaddressNameLabel').text()},
            {id: 2, model: 'billaddressNo', name: angular.element('#billaddressNoLabel').text()},
            {id: 3, model: 'billTypeName', name: angular.element('#billTypeNameLabel').text()},
            {id: 4, model: 'lastTimeLeftPrice', name: angular.element('#lastTimeLeftPriceLabel').text()},
            {id: 5, model: 'thisTimeSalesPrice', name: angular.element('#thisTimeSalesPriceLabel').text()},
            {id: 6, model: 'thisTimeBillPrice', name: angular.element('#thisTimeBillPriceLabel').text()},
            {id: 7, model: 'thisTimePayment', name: angular.element('#thisTimePaymentLabel').text()},
            {id: 8, model: 'thisTimeLeftPrice', name: angular.element('#thisTimeLeftPriceLabel').text()},
            {id: 9, model: 'beforeCloseDate', name: angular.element('#beforeCloseDateLabel').text()},
            {id: 10, model: 'salesPriceFromLastCloseBill', name: angular.element('#salesPriceFromLastCloseBillLabel').text()},
            {id: 11, model: 'totalLeftPrice', name: angular.element('#totalLeftPriceLabel').text()}
        ],
        searchOrderSort : [
            {id: 1, model: 'desc', name: angular.element('#descLabel').text()},
            {id: 2, model: 'asc', name: angular.element('#ascLabel').text()}
        ],
        listDataBilladdressAjax : [],
        listDataCustomerAjax : []
    }

    return model;
}]);

/**
 * 支払一覧画面コントローラー
 */
exexSMSApp.controller('AccountsReceivableListCtrl',
        ['$scope', '$filter', 'DialogsService', 'RouteService', 'AccountsReceivableListModel', 'Messages', 'ServerService',
         function($scope, $filter, DialogsService, RouteService, AccountsReceivableListModel, Messages, ServerService) {

    $scope.model = AccountsReceivableListModel;

    $scope.newListParamSearch = function(){
        $scope.model.hidden.listTmp = angular.copy($scope.model.hidden.listParamSearch);
        for (var i = 0; i < $scope.model.hidden.listSearch.length; i++) {
            var item = $scope.model.hidden.listSearch[i];
            var removeIndex = $scope.model.hidden.listTmp.map(function(items) { return items.model; }).indexOf(item.model);
            if (item.model == 'payCloseDate') {
                $scope.model.hidden.listTmp.splice(removeIndex, 1);
            } else if (item.model == 'billaddressName') {
                $scope.model.hidden.listTmp.splice(removeIndex, 1);
            } else if (item.model == 'billaddressNo') {
                $scope.model.hidden.listTmp.splice(removeIndex, 1);
            } else if (item.model == 'custName') {
                $scope.model.hidden.listTmp.splice(removeIndex, 1);
            } else if (item.model == 'custCd') {
                $scope.model.hidden.listTmp.splice(removeIndex, 1);
            } else if (item.model == 'salesPricePeriodCondition') {
                $scope.model.hidden.listTmp.splice(removeIndex, 1);
            }
        }
    }

    $scope.prepareListParamSearch = function (){
        var listParamSearch = $scope.model.hidden.listParamSearch;
        var sessionLogin = angular.fromJson(sessionStorage.getItem("session"));
        var sessionSearch = angular.fromJson(sessionStorage.getItem("accountsReceivableListSearch"));
        for (var i = 0; i < $scope.model.hidden.listSearch.length; i++) {
            var item = $scope.model.hidden.listSearch[i];
            item.listDetailParam = angular.copy($scope.model.hidden.listTmp);
            if (item.model == 'payCloseDate') {
                item.listDetailParam.push(listParamSearch[0]);
                if((!StringUtils.isEmpty(sessionSearch) && sessionSearch.payCloseDate === undefined)){
                    $scope.model.form.search.payCloseDate = DateUtils.getCurrentDate();
                }
            } else if (item.model == 'billaddressName') {
                item.listDetailParam.push(listParamSearch[1]);
            } else if (item.model == 'billaddressNo') {
                item.listDetailParam.push(listParamSearch[2]);
            } else if (item.model == 'custName') {
                item.listDetailParam.push(listParamSearch[3]);
            } else if (item.model == 'custCd') {
                item.listDetailParam.push(listParamSearch[4]);
            } else if (item.model == 'salesPricePeriodCondition') {
                item.listDetailParam.push(listParamSearch[5]);
                if(StringUtils.isEmpty(sessionSearch) || (!StringUtils.isEmpty(sessionSearch)
                        && sessionSearch.salesPricePeriodConditionFrom === undefined && sessionSearch.salesPricePeriodConditionTo === undefined )){
                    $scope.model.form.search.salesPricePeriodConditionFrom = DateUtils.getFirstDateOfMonth();
                    $scope.model.form.search.salesPricePeriodConditionTo = DateUtils.getLastDateOfCurrentMonth();
                }
            }
        }
    }

    $scope.prepareSessionSearch = function(session){
        var listSearch = [];
        for(var key in session){
            var item = {}
            if (key == 'payCloseDate') {
                $scope.model.form.search.payCloseDate = session[key];
                item.model = key
            } else if (key == 'billaddressName') {
                $scope.model.form.search.billaddressName = session[key];
                item.model = key;
            } else if (key == 'billaddressNo') {
                $scope.model.form.search.billaddressNo = session[key];
                item.model = key;
            } else if (key == 'custName') {
                $scope.model.form.search.custName = session[key];
                item.model = key;
            } else if (key == 'custCd') {
                $scope.model.form.search.custCd = session[key];
                item.model = key;
            } else if (key == 'salesPricePeriodConditionFrom') {
                $scope.model.form.search.createDateFrom = session[key]; item.model = 'salesPricePeriodCondition';
            } else if (key == 'salesPricePeriodConditionTo') {
                $scope.model.form.search.createDateTo = session[key];
            }
            if(!StringUtils.isEmpty(item.model)){
                listSearch.push(item);
            }
        }
        $scope.model.hidden.listSearch = listSearch;
        $scope.newListParamSearch();
        $scope.prepareListParamSearch();
    }

    $scope.convertParamsSearch = function(param, page){
        var params = {
            isHaveNoTransaction: param.isHaveNoTransaction,
            searchOrderKey : param.searchOrderKey,//List<Integer>
            searchOrderSort : param.searchOrderSort,//ASC or DESC
            page : page,
            pageSize : $scope.model.form.paginationInfo.pageSize,
            listDataBilladdressAjax : $scope.model.hidden.listDataBilladdressAjax,
            listDataCustomerAjax : $scope.model.hidden.listDataCustomerAjax
        };
        for (var i = 0; i < $scope.model.hidden.listSearch.length; i++) {
            var item = $scope.model.hidden.listSearch[i];
            if (item.model == 'payCloseDate') {
                params.payCloseDate = !StringUtils.isEmpty(param.payCloseDate) ? new Date(param.payCloseDate) : null;
            } else if (item.model == 'billaddressName') {
                params.billaddressName = !StringUtils.isEmpty(param.billaddressName) ? param.billaddressName : null;
            } else if (item.model == 'billaddressNo') {
                params.billaddressNo = (!StringUtils.isEmpty(param.billaddressNo) && param.billaddressNo.length > 0) ?
                        param.billaddressNo : null;
            } else if (item.model == 'custName') {
                params.custName = !StringUtils.isEmpty(param.custName) ? param.custName : null;
            } else if (item.model == 'custCd') {
                params.custCd = (!StringUtils.isEmpty(param.custCd) && param.custCd.length > 0) ?
                        param.custCd : null;
            } else if (item.model == 'salesPricePeriodCondition') {
                params.salesPricePeriodConditionFrom = !StringUtils.isEmpty(param.salesPricePeriodConditionFrom) ? new Date(param.salesPricePeriodConditionFrom) : null;
                params.salesPricePeriodConditionTo = !StringUtils.isEmpty(param.salesPricePeriodConditionTo) ? new Date(param.salesPricePeriodConditionTo) : null;
            }
        }
        return params;
    };

    $scope.changeListParamSearch = function (){
        $scope.newListParamSearch();
        $scope.prepareListParamSearch();
    }

    $scope.newRowParamSearch = function(){
        $scope.newListParamSearch();
        var tmp = ""
        var param = {
                model : $scope.model.hidden.listTmp[0].model,
                listDetailParam : $scope.model.hidden.listTmp
        };
        $scope.model.hidden.listSearch.push(param);
        for (var i = 0; i < param.listDetailParam.length; i++) {
            var tmp = $scope.model.hidden.listTmp[i];
            if(param.model == tmp.model){
                param.listDetailParam.splice(i, 1);
            }
        }
        $scope.prepareListParamSearch();
    }
    $scope.init = function(model) {
        $scope.getInit();
    };

    $scope.getInit = function(){
        ServerService.doPost('AccountsReceivableList/getInit', null).then(
            function(okResult) {
                var warning = okResult.data.warning;
                var error = okResult.data.failed;
                if(!StringUtils.isEmpty(warning)){
                    DialogsService.showWarning(Messages.getMessage('check.error'),warning);
                    return;
                }else if(!StringUtils.isEmpty(error)){
                    DialogsService.showError(Messages.getMessage('system.error'),error);
                    return;
                }else{
                    $scope.model.form.listL010023 = okResult.data.listL010023;
                    var sessionSearch = angular.fromJson(sessionStorage.getItem("accountsReceivableListSearch"));
                    if(!StringUtils.isEmpty(sessionSearch)){
                        $scope.prepareSessionSearch(sessionSearch);
                        $scope.model.form.search = angular.copy(sessionSearch);
                        $scope.doSearch(sessionSearch.page, sessionSearch);
                    } else {
                        $scope.model.form.search.searchOrderKey = [1];
                        //Create default search condition
                        $scope.createDefaultSearchCondition();
                        $scope.search(1);
                    }
                }
            }
        );
    };
    $scope.init();

    /**remove when click x button*/
    $scope.removeItem = function(index) {
        $scope.model.hidden.listSearch.splice(index, 1);
        $scope.newListParamSearch();
        $scope.prepareListParamSearch();
    };

    $scope.createDefaultSearchCondition = function() {
        var defaultCondition = {
            payCloseDate: DateUtils.getCurrentDate(),
            billaddressNo: []
        };
        $scope.prepareSessionSearch(defaultCondition);
    }

    $scope.convertDataBilladdress = function(param){
        var list = [];
        var listTmp = $("select[id='billaddressAjax']").select2('data');
        if(!StringUtils.isEmpty(listTmp)){
            for (var i = 0; i < listTmp.length; i++) {
                list.push({
                    no : listTmp[i].id,
                    name : listTmp[i].text
                });
            };
        }
        param.listDataBilladdressAjax = list;
        $scope.model.hidden.listDataBilladdressAjax = list;
    };

    $scope.convertDataCustomer = function(param){
        var list = [];
        var listTmp = $("select[id='customerAjax']").select2('data');
        if(!StringUtils.isEmpty(listTmp)){
            for (var i = 0; i < listTmp.length; i++) {
                list.push({
                    no : listTmp[i].id,
                    name : listTmp[i].text
                });
            };
        }
        param.listDataCustomerAjax = list;
        $scope.model.hidden.listDataCustomerAjax = list;
    };

    $scope.search = function(page){
        $scope.doSearch(page);
    };

    $scope.doSearch = function(page, session) {
        var params = $scope.convertParamsSearch($scope.model.form.search, page);
        params.listDataBilladdressAjax = [];
        params.listDataCustomerAjax = [];
        if(StringUtils.isEmpty(session)){
            if(!StringUtils.isEmpty($scope.model.form.search.billaddressNo) && $scope.model.form.search.billaddressNo.length > 0){
                $scope.convertDataBilladdress(params);
            }
            if(!StringUtils.isEmpty($scope.model.form.search.custCd) && $scope.model.form.search.custCd.length > 0){
                $scope.convertDataCustomer(params);
            }
        }else {
            if(!StringUtils.isEmpty(session.billaddressNo) && session.billaddressNo.length > 0){
                $scope.model.hidden.listDataBilladdressAjax = session.listDataBilladdressAjax;
                params.listDataBilladdressAjax = session.listDataBilladdressAjax;
            }
            if(!StringUtils.isEmpty(session.custCd) && session.custCd.length > 0){
                $scope.model.hidden.listDataCustomerAjax = session.listDataCustomerAjax;
                params.listDataCustomerAjax = session.listDataCustomerAjax;
            }
        }
        var searchOrderKey = params.searchOrderKey;
        sessionStorage.setItem("accountsReceivableListSearch", JSON.stringify(params));
        delete params.listDataBilladdressAjax;
        delete params.listDataCustomerAjax
        if(!StringUtils.isEmpty(params.payCloseDate)){
            ServerService.doPost('AccountsReceivableList/search', params).then(
                function(okResult) {
                     var warning = okResult.data.warning;
                     var error = okResult.data.failed;
                     if(!StringUtils.isEmpty(warning)){
                         DialogsService.showWarning(Messages.getMessage('check.error'),warning);
                         return;
                     }else if(!StringUtils.isEmpty(error)){
                         DialogsService.showError(Messages.getMessage('system.error'),error);
                         return;
                     }else{
                         $scope.model.form.accountsReceivableList = okResult.data.resultList;
                         $scope.model.form.paginationInfo = okResult.data.paginationInfo;
                     }

                     // add colresizable to table
                     setTimeout(function(){
                         $scope.setColResizable();
                     });
                 }
             );
        } else {
            return DialogsService.showWarning(Messages.getMessage('check.error'), Messages.getMessage('W10098',angular.element('#payCloseDateLabel').text()));
        }
     };

     $scope.exportExcel = function(param) {
         if(!StringUtils.isEmpty(param.payCloseDate)){
             if(!StringUtils.isEmpty(param.exportExcel)){
                 var params = $scope.convertParamsSearch(param);
                 delete params.listDataBilladdressAjax;
                 delete params.listDataCustomerAjax
                 params.page = 0;
                 params.pageSize = 0;
                 var title = Messages.getMessage("common.excel.file.name.accountsreceivable");
                 var fileName = title + '_' + DateUtils.getYYYYMMDD(new Date());
                 ServerService.doDownload('/AccountsReceivableList/exportExcel', params, 'application/vnd.ms-excel', fileName + '.xlsx');
             }
         } else {
             return DialogsService.showWarning(Messages.getMessage('check.error'), Messages.getMessage('W10098',angular.element('#payCloseDateLabel').text()));
         }
     };

     // set colResizable
     $scope.setColResizable = function(){
         // remove JCLRgrips if having
         $('.JCLRgrips').remove();

         angular.element('#tableAccountsReceivableList').colResizable({
             liveDrag: true,
             postbackSafe: true,
             useLocalStorage: true
         });
     }

     $scope.showAdvancesReceived = function(row){
         var options = {size: '800'};
         var param = {
                 billaddressNo: row.billaddressNo,
                 billaddressName: row.billaddressName,
                 advancesReceivedBalance: row.advancesReceivedBalance,
         }
         var dlg = DialogsService.showDialog('AdvancesReceivedHistory', 'advancesReceivedHistoryCtrl', param, options);
         dlg.result.then(function(param) {});
     }
}]);