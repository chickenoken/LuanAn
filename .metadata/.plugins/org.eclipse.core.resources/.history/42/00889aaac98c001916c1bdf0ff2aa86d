/**
 * Copyright(c) SystemEXE corp. All Rights Reserved.
 */
/**
 *
 * @version $Revision:  $  $Date:  $
 * @author : huy-du
 */
'use strict';

exexSMSApp.factory('MstCustomerItemSettingModel', [ 'BaseModel', function(BaseModel) {
    var model = BaseModel.getInstance();
    model.form = {
        custType: false,
        listCustomerItem0 :[],
        listCustomerItem1 :[],
        listCustomerItem2 :[],
        listCustomerItemDetail0 : [],
        listCustomerItemDetail1 : [],
        listCustomerItemDetail2 : []
    };
    model.listColorPopover = ColorUtils.getListColor();
    model.hidden = {
        isSubmited: false,
        hidControl: false,
        locale: '',
        listDisabled: []
    };
    return model;
}]);

exexSMSApp.controller('MstCustomerItemSettingCtrl',
        ['$scope','MstCustomerItemSettingModel', 'DialogsService', 'Messages', 'ServerService',
         function($scope, MstCustomerItemSettingModel, DialogsService, Messages, ServerService){

    $scope.lblControlLabelName = angular.element('#lblControlLabelName').text();
    $scope.lblControlTypeName = angular.element('#lblControlTypeName').text();

    $scope.model = MstCustomerItemSettingModel;
    $scope.isOpen = [];

    /**初期*/
    $scope.init = function(){
        $scope.getInit();
    };

    $scope.loadInitJsEvent = function(row, index, event){
        //Save color
        var currColor = row.backgroundColor;
        if(!StringUtils.isEmpty(event)){
            currColor = $(event.target).css('color');
        }
        row.backgroundColor = currColor;
        //Add color effect to button
        $('#eventColor').css({"background-color": currColor, "border-color": currColor});
        $('.popover').remove();
        angular.element('body').click();
    };

    $scope.showPopover = function(index, listIndex) {
        for(var i = 0; i < $scope.model.form.listCustomerItem0.length; i++){
            if(i == index && listIndex == 0){
                $scope.model.form.listCustomerItem0[i].opened = true;
            }else{
                $scope.model.form.listCustomerItem0[i].opened = false;
            }
        }
        for(var i = 0; i < $scope.model.form.listCustomerItem1.length; i++){
            if(i == index && listIndex == 1){
                $scope.model.form.listCustomerItem1[i].opened = true;
            }else{
                $scope.model.form.listCustomerItem1[i].opened = false;
            }
        }
        for(var i = 0; i < $scope.model.form.listCustomerItem2.length; i++){
            if(i == index && listIndex == 2){
                $scope.model.form.listCustomerItem2[i].opened = true;
            }else{
                $scope.model.form.listCustomerItem2[i].opened = false;
            }
        }
    };

    $scope.convertListView = function(list){
        angular.forEach(list, function(group, i){
            group.locale = group.locale ? group.locale.split("#") : ['ja', 'vi'];
            group.groupLabelName = group.groupLabelName ? group.groupLabelName.split("#")  : [group.groupLabelName];
        });
        return list;
    };

    $scope.convertListDetailView = function(list){
        angular.forEach(list, function(detail, i){
            detail.controlLabelName = detail.controlLabelName ? detail.controlLabelName.split("#") : [detail.controlLabelName];
            detail.locale = detail.locale ? detail.locale.split("#") : ['ja', 'vi'];
            // TODO add special control type, this unique on select
            if(!StringUtils.isEmpty(detail.controlType)
                    && (detail.controlType === 'SITE_NAME' || detail.controlType === 'SITE_ADDRESS' || detail.controlType === 'DEPT_NAME' ||
                            detail.controlType === 'DEPT_TEL' || detail.controlType === 'DEPT_FAX' || detail.controlType === 'OWNER_NAME' ||
                            detail.controlType === 'OWNER_POSITION' || detail.controlType === 'OWNER_MAIL_ADDRESS' || detail.controlType === 'OWNER_PHONE_MAIL_ADDRESS')){
                $scope.model.hidden.listDisabled.push(detail.controlType);
            }
        });
        return list;
    };

    $scope.convertListUpdate = function(list){
        var listTmp = angular.copy(list);
        angular.forEach(listTmp, function(group, i){
            group.locale = group.locale.join("#");
            if(!StringUtils.isEmpty(group.groupLabelName[0]) && StringUtils.isEmpty(group.groupLabelName[1])){
                group.groupLabelName[1] = group.groupLabelName[0];
            }
            if(!StringUtils.isEmpty(group.groupLabelName[1]) && StringUtils.isEmpty(group.groupLabelName[0])){
                group.groupLabelName[0] = group.groupLabelName[1];
            }
            group.groupLabelName = group.groupLabelName.join("#");
            delete group.opened;
        });
        return listTmp;
    }

    $scope.getInit = function(){
        var param = {
            custType: $scope.model.form.custType
        }
        ServerService.doPost('MstCustomerItemSetting/getInit', param).then(
            function(okResult) {
                var error = okResult.data.failed;
                var warning =  okResult.data.warning;
                if(!StringUtils.isEmpty(error)){
                    DialogsService.showError(Messages.getMessage('system.error'), error);
                    return;
                }else if(!StringUtils.isEmpty(warning)){
                    DialogsService.showWarning(Messages.getMessage('check.error'), warning);
                    return;
                }
                $scope.oneAtATime = true;
                $scope.model.form.listCustomerItem0 = $scope.convertListView(okResult.data.listCustomerItem0);
                $scope.model.form.listCustomerItem1 = $scope.convertListView(okResult.data.listCustomerItem1);
                $scope.model.form.listCustomerItem2 = $scope.convertListView(okResult.data.listCustomerItem2);
                var sessionLogin = angular.fromJson(sessionStorage.getItem("session"));
                $scope.model.hidden.locale = sessionLogin.locale;
             }
         );
    }

    /**add new customer item setting*/
    $scope.addItem = function(position, mode, item, index) {
        $('.popover').remove();
        var options = {size: '1350'};
        var param = {
            position: position,
            mode: mode,
            index: index,
            custType: $scope.model.form.custType
        }
        if(position == 0 && mode == "add"){
            param.item = null;
        } else if(position == 0 && mode == "update"){
            param.item = item;
        } else if(position == 1 && mode == "add"){
            param.item = null;
        } else if(position == 1 && mode == "update"){
            param.item = item;
        } else if(position == 2 && mode == "update"){
            param.item = item;
        }
        DialogsService.showDialog('MstCustomerItemSetting/customerItemSetting', 'customerItemCtrl', param, options)
        .result.then(function(param) {
            for (var i = 0; i < $scope.isOpen.length; i++) {
                $scope.isOpen[i] = false;
            }
            $scope.getInit();
        });
    };

    $scope.removeItem = function(index){
        $scope.selectedComponents.splice(index, 1);
    }

    /**更新*/
    $scope.update = function(formInvalid) {
        $scope.model.hidden.isSubmited = true;
        if (formInvalid) {
            return;
        }
        DialogsService.showConfirm(Messages.getMessage('title.confirm'), Messages.getMessage('S00004'))
        .result.then(function(btn){
            var listUpdate = [];
            angular.forEach($scope.model.form.listCustomerItem0, function(item, i){
                delete item.isOpen;
                listUpdate.push(item);
            });
            angular.forEach($scope.model.form.listCustomerItem1, function(item, i){
                delete item.isOpen;
                listUpdate.push(item);
            });
            angular.forEach($scope.model.form.listCustomerItem2, function(item, i){
                delete item.isOpen;
                listUpdate.push(item);
            });
            listUpdate = $scope.convertListUpdate(listUpdate);
            var param = {
                custType: $scope.model.form.custType,
                listCustomerItemDetail: listUpdate,
                updateMode: "UPDATE"
            }
            ServerService.doPost('MstCustomerItemSetting/update', param).then(
                function(okResult) {
                    var error = okResult.data.failed;
                    var warning = okResult.data.warning;
                    var success = okResult.data.success;
                    if(!StringUtils.isEmpty(error)){
                        DialogsService.showError(Messages.getMessage('system.error'), error);
                        return;
                    }else if(!StringUtils.isEmpty(warning)){
                        DialogsService.showWarning(Messages.getMessage('check.error'), warning);
                        return;
                    }else if(!StringUtils.isEmpty(success)){
                        DialogsService.showNotify(Messages.getMessage('title.info'), success)
                        $scope.getInit();
                        return;
                    }
                 }
             );
        });
    };

    $scope.changeCustomerType = function(){
        $scope.getInit();
    }

    $scope.changeDisplay = function(index, value, mode){
        if(mode == 0){
            $scope.model.form.listCustomerItem0[index].groupCustDisplayFlag = !value;
        }else if(mode == 1){
            $scope.model.form.listCustomerItem1[index].groupCustDisplayFlag = !value;
        }else {
            $scope.model.form.listCustomerItem2[index].groupCustDisplayFlag = !value;
        }
    }

    $scope.changeDisplay2 = function(index, value, mode){
        if(mode == 0){
            $scope.model.form.listCustomerItem0[index].groupStockaddressDisplayFlag = !value;
        }else if(mode == 1){
            $scope.model.form.listCustomerItem1[index].groupStockaddressDisplayFlag = !value;
        }else {
            $scope.model.form.listCustomerItem2[index].groupStockaddressDisplayFlag = !value;
        }
    }

    $scope.sortableConfig = {
        handle:'.handle',
    };

    $scope.showItemList = function() {
        var options = {size: '600'};
        DialogsService.showDialog('MstCustomerItemSetting/MstDetailItemList', 'mstDetailItemListCtrl', {}, options).result.then(function(param) {}, function(){
        });
    };

    $scope.showItemCustomerList = function(groupNo, groupFreeItemFlag){
        var param = {
            custType: $scope.model.form.custType ? true : false,
            groupNo : groupNo,
            groupFreeItemFlag : groupFreeItemFlag
        }
        ServerService.doPost('MstCustomerItemSetting/detailCustomerItemList', param).then(
            function(okResult) {
                var error = okResult.data.failed;
                var warning =  okResult.data.warning;
                if(!StringUtils.isEmpty(error)){
                    DialogsService.showError(Messages.getMessage('system.error'), error);
                    return;
                }else if(!StringUtils.isEmpty(warning)){
                    DialogsService.showWarning(Messages.getMessage('check.error'), warning);
                    return;
                }
                if(okResult.data.listCustomerItemDetail.length > 0) {
                    if(okResult.data.listCustomerItemDetail[0].displayPosition == '0') {
                        $scope.model.form.listCustomerItemDetail0 = $scope.convertListDetailView(okResult.data.listCustomerItemDetail);
                    } else if(okResult.data.listCustomerItemDetail[0].displayPosition == '1') {
                        $scope.model.form.listCustomerItemDetail1 = $scope.convertListDetailView(okResult.data.listCustomerItemDetail);
                    } else if(okResult.data.listCustomerItemDetail[0].displayPosition == '2') {
                        $scope.model.form.listCustomerItemDetail2 = $scope.convertListDetailView(okResult.data.listCustomerItemDetail);
                    }
                }
                var sessionLogin = angular.fromJson(sessionStorage.getItem("session"));
                $scope.model.hidden.locale = sessionLogin.locale;
            }
        );
    }

    $scope.init();
}])


exexSMSApp.controller('mstDetailItemListCtrl',
        ['$scope', '$uibModalInstance', 'MstCustomerItemSettingModel', 'Messages', 'ServerService','DialogsService',
         function($scope, $uibModalInstance, MstCustomerItemSettingModel, Messages, ServerService, DialogsService){

    $scope.modelParent = MstCustomerItemSettingModel;

    $scope.init = function(){
        var param = {
            custType: $scope.modelParent.form.custType ? true : false,
            groupNo : $scope.modelParent.form.groupNo,
            groupFreeItemFlag : true
        }
        ServerService.doPost('MstCustomerItemSetting/getDetailItemList', param).then(
            function(okResult) {
                var error = okResult.data.failed;
                var warning =  okResult.data.warning;
                if(!StringUtils.isEmpty(error)){
                    DialogsService.showError(Messages.getMessage('system.error'), error);
                    return;
                }else if(!StringUtils.isEmpty(warning)){
                    DialogsService.showWarning(Messages.getMessage('check.error'), warning);
                    return;
                }
                $scope.modelParent.form.listS020020 = okResult.data.listS020020;
                $scope.listDetail = okResult.data.listDetailItem;
             }
         );
    };
    $scope.init();

    $scope.close = function(){
        $uibModalInstance.dismiss('close');
    };

    $scope.ok = function(){
        var param = {
            listDetail: $scope.listDetail
        }
        DialogsService.showConfirm(Messages.getMessage('title.confirm'), Messages.getMessage('S00004'))
        .result.then(function(btn){
            ServerService.doPost('MstCustomerItemSetting/updateDetailItemList', param).then(
                function(okResult) {
                    var error = okResult.data.failed;
                    var warning =  okResult.data.warning;
                    var success =  okResult.data.success;
                    if(!StringUtils.isEmpty(error)){
                        dialogs.error(Messages.getMessage('system.error'), error);
                        return;
                    }else if(!StringUtils.isEmpty(warning)){
                        dialogs.warn(Messages.getMessage('check.error'), warning);
                        return;
                    }else if(!StringUtils.isEmpty(success)){
                        DialogsService.showNotify(Messages.getMessage('title.info'), success).result.then(function(btn){
                            $uibModalInstance.dismiss('close');
                        });
                    }
                 }
             );
        });
    };

}]);
