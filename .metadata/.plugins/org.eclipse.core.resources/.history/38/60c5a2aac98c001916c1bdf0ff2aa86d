/**
 * Copyright(c) SystemEXE corp. All Rights Reserved.
 */
/**
 *
 * @version $Revision:  $  $Date:  $
 * @author : huy-du
 */
'use strict';
/**
 * Table :
 */
exexSMSApp.factory('MstSiteItemSettingModel', [ 'BaseModel', function(BaseModel) {
    var model = BaseModel.getInstance();
    model.form = {
        listMstCode: [],
        listSiteItem0 :[],
        listSiteItem1 :[],
        listSiteItem2 :[],
        listSiteItemDetail0 : [],
        listSiteItemDetail1 : [],
        listSiteItemDetail2 : []
    };
    model.listColorPopover = ColorUtils.getListColor();
    model.hidden = {
        isSubmited: false,
        hideControl: false,
        freeLabel:{}
    };

return model;

}]);
exexSMSApp.controller('MstSiteItemSettingCtrl',
        ['$scope','MstSiteItemSettingModel', 'DialogsService', 'Messages', 'ServerService',
         function($scope, MstSiteItemSettingModel,  DialogsService, Messages, ServerService){

    $scope.model = MstSiteItemSettingModel;
    $scope.selectedComponents = [];
    $scope.isOpen = [];

    /**初期*/
    $scope.init = function(){
        $scope.getInit();
    };

    $scope.loadInitJsEvent = function(row, index, event){
        //Save color
        var currColor = row.backgroundColor;
        if(!StringUtils.isEmpty(event)){
            currColor = $(event.target).css('color');
        }
        row.backgroundColor = currColor;
        //Add color effect to button
        $('#eventColor').css({"background-color": currColor, "border-color": currColor});
        $('.popover').remove();
        angular.element('body').click();
    };

    $scope.showPopover = function(index, listIndex) {
        for(var i = 0; i < $scope.model.form.listSiteItem0.length; i++){
            if(i == index && listIndex == 0){
                $scope.model.form.listSiteItem0[i].opened = true;
            }else{
                $scope.model.form.listSiteItem0[i].opened = false;
            }
        }
        for(var i = 0; i < $scope.model.form.listSiteItem1.length; i++){
            if(i == index && listIndex == 1){
                $scope.model.form.listSiteItem1[i].opened = true;
            }else{
                $scope.model.form.listSiteItem1[i].opened = false;
            }
        }
        for(var i = 0; i < $scope.model.form.listSiteItem2.length; i++){
            if(i == index && listIndex == 2){
                $scope.model.form.listSiteItem2[i].opened = true;
            }else{
                $scope.model.form.listSiteItem2[i].opened = false;
            }
        }
    };

    /**convert data for list view*/
    $scope.convertListView = function(list){
        angular.forEach(list, function(group, i){
            group.locale = group.locale ? group.locale.split("#") : ['ja', 'vi'];
            group.groupLabelName = group.groupLabelName ? group.groupLabelName.split("#")  : [group.groupLabelName];
        });
        return list;
    }

    $scope.convertListDetailView = function(list){
        angular.forEach(list, function(detail, i){
            detail.controlLabelName = detail.controlLabelName ? detail.controlLabelName.split("#") : [detail.controlLabelName];
            detail.locale = detail.locale ? detail.locale.split("#") : ['ja', 'vi'];
        });
        return list;
    };

    /**convert data for list update*/
    $scope.convertListUpdate = function(list){
        var listTmp = angular.copy(list);
        angular.forEach(listTmp, function(group, i){
            group.locale = group.locale.join("#");
            if(!StringUtils.isEmpty(group.groupLabelName[0]) && StringUtils.isEmpty(group.groupLabelName[1])){
                group.groupLabelName[1] = group.groupLabelName[0];
            }
            if(!StringUtils.isEmpty(group.groupLabelName[1]) && StringUtils.isEmpty(group.groupLabelName[0])){
                group.groupLabelName[0] = group.groupLabelName[1];
            }
            group.groupLabelName = group.groupLabelName.join("#");
            delete group.opened;
        });
        return listTmp;
    }

    /**初期データ*/
    $scope.getInit = function(){
        var param = {};
        ServerService.doPost('MstSiteItemSetting/getDataSiteGroup', param).then(
            function(okResult) {
                var error = okResult.data.failed;
                var warning =  okResult.data.warning;
                if(!ValidateUtil.isValidTextEmpty(error)){
                    dialogs.error(Messages.getMessage('system.error'), error);
                    return;
                }else if(!ValidateUtil.isValidTextEmpty(warning)){
                    dialogs.warn(Messages.getMessage('check.error'), warning);
                    return;
                }
                $scope.oneAtATime = true;
                $scope.model.form.listSiteItem0 = $scope.convertListView(okResult.data.listSiteItem0);
                $scope.model.form.listSiteItem1 = $scope.convertListView(okResult.data.listSiteItem1);
                $scope.model.form.listSiteItem2 = $scope.convertListView(okResult.data.listSiteItem2);
                var sessionLogin = angular.fromJson(sessionStorage.getItem("session"));
                $scope.model.hidden.locale = sessionLogin.locale;

                // get free label from session
                $scope.model.hidden.freeLabel = angular.fromJson(sessionStorage.getItem("freeLabel"));
             }
         );
    }

    /**add new site item setting*/
    $scope.addItem = function(position, mode, item, index) {
        $('.popover').remove();
        var options = {size: '1350'};
        var param = {
            position: position,
            index: index + 1
        }
        if((position == 0 || position == 1) && mode == "add"){
            param.item = null;
        } else if((position == 0 || position == 1 || position == 2) && mode == "update"){
            param.item = item;
        }
        DialogsService.showDialog('MstSiteItemSetting/SiteItemSetting', 'siteItemCtrl', param, options)
        .result.then(function(param) {
            for (var i = 0; i < $scope.isOpen.length; i++) {
                $scope.isOpen[i] = false;
            }
            $scope.getInit();
        });
    };

    $scope.removeItem = function(index){
        $scope.selectedComponents.splice(index, 1);
    }

    /**更新*/
    $scope.update = function(formInvalid) {
        $scope.model.hidden.isSubmited = true;
        if (formInvalid) {
            return;
        }
        DialogsService.showConfirm(Messages.getMessage('title.confirm'), Messages.getMessage('S00004'))
        .result.then(function(btn){
            var listUpdate = [];
            angular.forEach($scope.model.form.listSiteItem0, function(item, i){
                delete item.isOpen;
                listUpdate.push(item);
            });
            angular.forEach($scope.model.form.listSiteItem1, function(item, i){
                delete item.isOpen;
                listUpdate.push(item);
            });
            angular.forEach($scope.model.form.listSiteItem2, function(item, i){
                delete item.isOpen;
                listUpdate.push(item);
            });
            listUpdate = $scope.convertListUpdate(listUpdate);
            var param = {
                listSiteItemDetail: listUpdate,
                updateMode: "UPDATE"
            }
            ServerService.doPost('MstSiteItemSetting/update', param).then(
                function(okResult) {
                    var error = okResult.data.failed;
                    var warning =  okResult.data.warning;
                    var success =  okResult.data.success;
                    if(!ValidateUtil.isValidTextEmpty(error)){
                        DialogsService.showError(Messages.getMessage('system.error'), error);
                        return;
                    }else if(!ValidateUtil.isValidTextEmpty(warning)){
                        DialogsService.showWarning(Messages.getMessage('check.error'), warning);
                        return;
                    }else if(!ValidateUtil.isValidTextEmpty(success)){
                        DialogsService.showNotify(Messages.getMessage('title.info'), success)
                        $scope.getInit();
                        return;
                    }
                 }
             );
        });
    };

    $scope.changeDisplay = function(index, value, mode){
        if(mode == 0){
            $scope.model.form.listSiteItem0[index].groupControlDisplayFlag = !value;
        }else if(mode == 1){
            $scope.model.form.listSiteItem1[index].groupControlDisplayFlag = !value;
        }else {
            $scope.model.form.listSiteItem2[index].groupControlDisplayFlag = !value;
        }
    }

    $scope.$on("MstSiteItemSettingPopup#insertGroup", function() {
        $scope.getInit();
    });

    $scope.sortableConfig = {
        handle:'.handle',
    };

    $scope.showItemList = function() {
        var options = {size: '600'};
        DialogsService.showDialog('MstCustomerItemSetting/MstDetailItemList', 'mstDetailItemListCtrl', {}, options).result.then(function(param) {}, function(){
        });
    };

    $scope.showItemSiteList = function(groupNo, groupFreeItemFlag){
        var param = {
            groupNo : groupNo,
            groupFreeItemFlag : groupFreeItemFlag
        }
        ServerService.doPost('MstSiteItemSetting/detailSiteItemList', param).then(
            function(okResult) {
                var error = okResult.data.failed;
                var warning =  okResult.data.warning;
                if(!ValidateUtil.isValidTextEmpty(error)){
                    DialogsService.showError(Messages.getMessage('system.error'), error);
                    return;
                }else if(!ValidateUtil.isValidTextEmpty(warning)){
                    DialogsService.showWarning(Messages.getMessage('check.error'), warning);
                    return;
                }
                if(okResult.data.listSiteItemDetail.length > 0) {
                    if(okResult.data.listSiteItemDetail[0].displayPosition == '0') {
                        $scope.model.form.listSiteItemDetail0 = $scope.convertListDetailView(okResult.data.listSiteItemDetail);
                    } else if(okResult.data.listSiteItemDetail[0].displayPosition == '1') {
                        $scope.model.form.listSiteItemDetail1 = $scope.convertListDetailView(okResult.data.listSiteItemDetail);
                    } else if(okResult.data.listSiteItemDetail[0].displayPosition == '2') {
                        $scope.model.form.listSiteItemDetail2 = $scope.convertListDetailView(okResult.data.listSiteItemDetail);
                    }
                }
            }
        );
    }
    $scope.init();
}])

exexSMSApp.controller('mstDetailItemListCtrl',
        ['$rootScope', '$scope', '$uibModalInstance', 'MstSiteItemSettingModel', 'Messages', 'ServerService','DialogsService',
         function($rootScope, $scope, $uibModalInstance, MstSiteItemSettingModel, Messages, ServerService, DialogsService){

    $scope.modelParent = MstSiteItemSettingModel;

    $scope.init = function(){
        var param = {}
        ServerService.doPost('MstSiteItemSetting/getDetailItemList', param).then(
                function(okResult) {
                    var error = okResult.data.failed;
                    var warning =  okResult.data.warning;
                    if(!ValidateUtil.isValidTextEmpty(error)){
                        dialogs.error(Messages.getMessage('system.error'), error);
                        return;
                    }else if(!ValidateUtil.isValidTextEmpty(warning)){
                        dialogs.warn(Messages.getMessage('check.error'), warning);
                        return;
                    }
                    $scope.modelParent.form.listS020020 = okResult.data.listS020020;
                    $scope.listDetail = okResult.data.listDetailItem;
                 }
             );
    };
    $scope.init();
    $scope.close = function(){
        $uibModalInstance.dismiss('close');
    };
    $scope.ok = function(){
        var param = {
                listDetail: $scope.listDetail
        }
        DialogsService.showConfirm(Messages.getMessage('title.confirm'), Messages.getMessage('S00004'))
        .result.then(function(btn){
            ServerService.doPost('MstSiteItemSetting/updateDetailItemList', param).then(
                    function(okResult) {
                        var error = okResult.data.failed;
                        var warning =  okResult.data.warning;
                        var success =  okResult.data.success;
                        if(!ValidateUtil.isValidTextEmpty(error)){
                            dialogs.error(Messages.getMessage('system.error'), error);
                            return;
                        }else if(!ValidateUtil.isValidTextEmpty(warning)){
                            dialogs.warn(Messages.getMessage('check.error'), warning);
                            return;
                        }else if(!ValidateUtil.isValidTextEmpty(success)){
                            DialogsService.showNotify(Messages.getMessage('title.info'), success).result.then(function(btn){
                                $uibModalInstance.dismiss('close');
                            });
                        }
                     },
                     function(errResult){}
                 );
        });
    };

}]);