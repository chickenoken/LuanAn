/**
 * Copyright(c) SystemEXE corp. All Rights Reserved.
 */
/**
 *
 * @version $Revision: $ $Date: $
 * @author huy-du
 */

'use strict';

exexSMSApp.factory('ItemAnalyticsModel', ['BaseModel', '$rootScope', function(BaseModel, $rootScope) {

    var model = BaseModel.getInstance();
    model.form = {
            listHeader :[],
            listTotalSales: [],
            listName:[],
            listSubName:[]
    };

    model.chartData = {
            listObject: [],
            listHeader: [],
            lengthObject: 0,
            value: ''
    };

    model.hidden = {
            viewChart: false,
            viewTable : false,
            initialItemSum: true,
            salesSumPrice: true,
            salesFeeTaxPrice: true,
            salesItemSum: true,
            stockSumPrice: true,
            stockFeeTaxPrice: true,
            stockItemSum: true,
            viewLine: '0',
            itemHeight : 125,
            heightOneRow: 25,
            itemHeightItem : 133,
            heightOneRowItem: 17,
            hideAll : false,
            tableWidth: 1207,
            heightHeader: 30,
            innerHeight: 715,
            ankenBetsuLength: 0,
            colspan: 12,
            listObject: [],
            nodata: false,
            searchParam:'',
            selectAll : false
    };
    return model;
} ]);

exexSMSApp.controller('ItemAnalyticsCtrl', ['$rootScope', '$scope', '$filter', '$window', '$timeout', 'ServerService', 'DialogsService','ItemAnalyticsModel', 'Messages', 'HeaderModel',
                                    function($rootScope, $scope, $filter, $window, $timeout, serverService,dialogsService,ItemAnalyticsModel, Messages, HeaderModel) {
    $scope.model = ItemAnalyticsModel;
    $scope.modelHeader = HeaderModel;
    $scope.model.checkIndex = [];
    $scope.model.listIndex = [];
    $scope.titlePanel = '　案件別(月毎: 2015/01 　～　 2015/12)';


    $scope.calTabelWidth = function(){
        if($scope.status != undefined && $scope.status !== null){
          $timeout(function() {
                var width = 0;
                var widthOuter = 0;
                var widthTableLeft = 0;
                var widthTableMiddle = 0;
                var widthTableMiddleLabel = 0;
                var widthTableRight  = 0;
                var innerHeight = 0;
                var subWidth = 0;
                widthOuter = parseInt(angular.element('.outer').width());
                widthTableLeft = parseInt(angular.element('#table-left').width());
                widthTableMiddle = parseInt(angular.element('#table-middle-label').width());
                widthTableRight  = parseInt(angular.element('#table-right').width());
                innerHeight = parseInt(angular.element('#table-middle').height());
                subWidth = widthTableLeft + widthTableRight + widthTableMiddle + 3;
                width = widthOuter - subWidth;
                $scope.model.hidden.tableWidth = width;
                $scope.model.hidden.innerHeight = innerHeight + 12;
          },500);
        }
    };

    /**
     * 集計
     */
    $scope.$on('aggregate', function(evt, param){
        $scope.status = '';
        $scope.model.hidden.viewTable = false;
        $scope.model.hidden.selectAll = false;
        $scope.model.hidden.nodata = true;
        $scope.model.hidden.ankenBetsuLength = param.data.ankenBetsuLength;
        $scope.model.hidden.searchParam = param;
        delete param.data.ankenBetsuLength;
        serverService.doPost('ItemAnalytics/aggregate', param.data).then(
        /* success function */
        function(result) {
            if(!ValidateUtil.isValidTextEmpty(result.data)){
                if(undefined !=  result.data.warning && null !=  result.data.warning){
                    dialogsService.showError(Messages.getMessage('check.error'), result.data.warning, {size : 'sm',});
                  return;
                } else {
                    $scope.status = param.status.toString();
                    $scope.model.form.listHeader = result.data.listHeader;
                    $scope.model.form.listTotalSales = angular.fromJson(result.data.listResult);
                    $scope.model.hidden.colspan = $scope.model.form.listHeader.length;
                    $scope.model.hidden.sumPrice = true;
                    $scope.model.hidden.feeTaxSumPrice = true;
                    $scope.model.hidden.itemCost = true;
                    $scope.model.hidden.grossMargin = true;
                    $scope.model.hidden.grossMarginRate = true;
                    if(!ValidateUtil.isValidTextEmpty($scope.model.form.listTotalSales)){
                        $scope.model.hidden.viewTable = true;
                        $scope.model.hidden.nodata = false;
                    }
                    $scope.model.checkIndex = [];
                    $scope.model.hidden.listObject = [];
                    $scope.calHeight();
                    $scope.calTabelWidth();
                    $scope.model.hidden.viewChart = false;
                }
            }
        },
        /* error function */
        function(result) {});
    });

    /**
     * Excelを出す。
     */
    $scope.$on('exportExcel', function(evt, param){
        $scope.model.hidden.ankenBetsuLength = param.data.ankenBetsuLength;
        delete param.data.ankenBetsuLength;
        var fileName = '';
        var ankenBetsu = StringUtils.isEmpty(param.data.ankenBetsu) ? '' : param.data.ankenBetsu;
        if (!StringUtils.isEmpty(ankenBetsu)
                && '7' == ankenBetsu) {
            fileName = '品目別売上・セット品分解_' + DateUtils.getYYYYMMDD(new Date());
        } else {
            fileName = '品目別売上_' + DateUtils.getYYYYMMDD(new Date());
        }
        serverService.doDownload('/ItemAnalytics/exportExcel', param.data
                , 'application/vnd.ms-excel', fileName + '.xlsx');
    });

    /**
     * hide row when uncheck
     */
    $scope.hideRow = function(index){
        if($scope.model.hidden.initialItemSum && index == 0){
            return true;
        }else if($scope.model.hidden.salesSumPrice && index == 1){
            return true;
        }else if($scope.model.hidden.salesFeeTaxPrice && index == 2){
            return true;
        }else if($scope.model.hidden.salesItemSum && index == 3){
            return true;
        }else if($scope.model.hidden.stockSumPrice && index == 4){
            return true;
        }else if($scope.model.hidden.stockFeeTaxPrice && index == 5){
            return true;
        }else if($scope.model.hidden.stockItemSum && index == 6){
            return true;
        }else{
            return false;
        }
    };

    /**
     * check row is last row
     */
    $scope.lastRow = function(index, mode){
            var tmpIndex = 5;
            var countRowTmp = 0;
            if($scope.model.hidden.initialItemSum){
              tmpIndex = 0;
              countRowTmp += 1;
            }
            if($scope.model.hidden.salesSumPrice){
              tmpIndex = 1;
              countRowTmp += 1;
            }
            if($scope.model.hidden.salesFeeTaxPrice){
              tmpIndex = 2;
              countRowTmp += 1;
            }
            if($scope.model.hidden.salesItemSum){
              tmpIndex = 3;
              countRowTmp += 1;
            }
            if($scope.model.hidden.stockSumPrice){
              tmpIndex = 4;
              countRowTmp += 1;
            }
            if($scope.model.hidden.stockFeeTaxPrice){
              tmpIndex = 5;
              countRowTmp += 1;
            }
            if($scope.model.hidden.stockItemSum){
              tmpIndex = 6;
              countRowTmp += 1;
            }
            if(index == tmpIndex){
               return true;
            }else{
                return false;
            }
    };

    //Hide row when check
    $scope.hideLastRow = function(index){
        if(index != ""){
           return false;
        }else{
          return true;
        }
    };

    /**
    * calculate the height of tables
    **/
    $scope.calHeight= function(){
            if(!$scope.modelHeader.login.permission.san0200Access){
              $scope.model.hidden.stockSumPrice = false;
              $scope.model.hidden.stockFeeTaxPrice = false;
            }
            var height = 0;
            var countRowTmp = 0;
            if($scope.model.hidden.initialItemSum){
               height += 1;
               countRowTmp += 1;
            }
            if($scope.model.hidden.salesSumPrice){
               height += 1;
              countRowTmp += 1;
            }
            if($scope.model.hidden.salesFeeTaxPrice){
               height += 1;
              countRowTmp += 1;
            }
            if($scope.model.hidden.salesItemSum){
               height += 1;
              countRowTmp += 1;
            }
            if($scope.model.hidden.stockSumPrice){
               height += 1;
              countRowTmp += 1;
            }
            if($scope.model.hidden.stockFeeTaxPrice){
               height += 1;
              countRowTmp += 1;
            }
            if($scope.model.hidden.stockItemSum){
               height += 1;
              countRowTmp += 1;
            }
            if(countRowTmp == 1){
                $scope.model.hidden.heightOneRow = 52;
                $scope.model.hidden.itemHeight = 52;
            }else{
              $scope.model.hidden.heightOneRow = 27;
              $scope.model.hidden.itemHeight = height*27;
            }
            if(height == 0){
              $scope.model.hidden.hideAll = true;
              $scope.model.hidden.viewChart = false;
            }else{
              $scope.model.hidden.hideAll = false;
            }
      $scope.calTabelWidth();
//      $scope.showViewLine($scope.model.hidden.viewLine);
    };

    /**
     * hide chart
     */
    $scope.hideChart = function(){
        for (var i = 0; i < $scope.model.checkIndex.length; i++) {
            if($scope.model.checkIndex[$scope.model.listIndex[i]]){
                return true;
            }
        };
        return false;
    };


    /**
     * show chart
     */
    $scope.showChartLine= function(index, object){
        $scope.model.axisLabel = Messages.getMessage('common.chart.label.047');
        var listObject = $scope.model.hidden.listObject;
        var lengthObject = listObject.length;
        var check = $scope.model.checkIndex[index];
        if(check){
            listObject.splice(index, 0, object);
        }else{
            for(var i = 0; i < lengthObject; i++){
                if(object.itemName === listObject[i].itemName){
                    listObject.splice(i, 1);
                    break;
                }
            }
        }
        if(listObject.length != 0){
            $scope.showViewLine($scope.model.hidden.viewLine);
        }else{
            $scope.model.hidden.viewChart = false;
        }
    };

    /**show chart in popup*/
    $scope.showChart = function(mode){
        var data = angular.copy($scope.model.chartData);
        data.type = mode;
        data.mode = 'ITEM';
        data.status = $scope.status;
        data.listHeader = $scope.model.form.listHeader;
        var listObject = angular.copy($scope.model.hidden.listObject);
        var lengthObject = listObject.length;
        data.listObject = listObject;
        data.lengthObject = lengthObject;
        data.title = "   ";
        if($scope.status == 1 || $scope.status == 2){
            data.title += $scope.model.hidden.searchParam.data.yearMonthStart + Messages.getMessage('common.comma.001') + $scope.model.hidden.searchParam.data.yearMonthEnd;
        }else if($scope.status == 3 || $scope.status == 4){
            data.title += $scope.model.hidden.searchParam.data.aggregateFromDate + Messages.getMessage('common.comma.001') + $scope.model.hidden.searchParam.data.aggregateToDate;
        }
        if(!ValidateUtil.isValidTextEmpty(data.listObject)){
            var i = 0, length = data.listObject.length;
            for(;i < length;i++){
                data.listObject[i].objectName = data.listObject[i].itemName;
                if(mode != 'COMBINATION'){
                    data.listObject[i].listObject[0].listAnalytics.splice(0, 1);
                }
            }
            var options = {size: '900'};
            dialogsService.showDialog('SalesAnalyticsChartDialog','SalesAnalyticsChartCtrl', data, options);
        }else{
            dialogsService.showWarning(Messages.getMessage('check.error'), Messages.getMessage('W00261'), {size : '355',});
            return;
        }
    };

    /**show chart in popup*/
    $scope.showChartPie = function(index, item){
        var data = {};
        data.title = "   ";
        if($scope.status == 1){
            data.title += item;
        }else if($scope.status == 2 || $scope.status == 3){
            data.title += item.split(' ')[0] + " " +item.split(' ')[1] + " " +item.split(' ')[2];
        }else if($scope.status == 4){
            var date = new Date(item);
            var month = (date.getMonth() + 1).toString();
            var day = date.getDate().toString();
            data.title += month + '/' + day;
        }
        data.type = 'PIE';
        data.mode = 'ITEM';
        data.index = index;
        var listObject = angular.copy($scope.model.form.listTotalSales);
        var lengthObject = listObject.length;
        data.listObject = listObject;
        data.lengthObject = lengthObject;
        if(!ValidateUtil.isValidTextEmpty(data.listObject)){
            var i = 0, length = data.listObject.length;
            for(;i < length;i++){
                data.listObject[i].objectName = data.listObject[i].itemName;
                data.listObject[i].listObject[0].listAnalytics.splice(0, 1);
            }
            var options = {size: '700'};
            dialogsService.showDialog('SalesAnalyticsChartDialog','SalesAnalyticsChartCtrl', data, options);
        }else{
            dialogsService.showWarning(Messages.getMessage('check.error'), Messages.getMessage('W00261'), {size : '355',});
            return;
        }
    };

    /**
     * check aggregate
     */
    $scope.checkAggregate = function(){
        if($scope.model.hidden.viewLine == 0 && $scope.model.hidden.initialItemSum){
            return true;
        }
        if($scope.model.hidden.viewLine == 1 && $scope.model.hidden.salesSumPrice){
            return true;
        }
        if($scope.model.hidden.viewLine == 2 && $scope.model.hidden.salesFeeTaxPrice){
            return true;
        }
        if($scope.model.hidden.viewLine == 3 && $scope.model.hidden.salesItemSum){
            return true;
        }
        if($scope.model.hidden.viewLine == 4 && $scope.model.hidden.stockSumPrice){
            return true;
        }
        if($scope.model.hidden.viewLine == 5 && $scope.model.hidden.stockFeeTaxPrice){
            return true;
        }
        if($scope.model.hidden.viewLine == 6 && $scope.model.hidden.stockItemSum){
            return true;
        }
        return false;
    };

    /**
     * show/hide line in chart
     */
    $scope.showViewLine = function(value){
        //Show/hide 1 line
        if($scope.checkAggregate()){
            var listObject = $scope.model.hidden.listObject;
            if(listObject.length != 0){
                var lengthObject = listObject.length;
                $scope.model.chartData.listObject = listObject;
                $scope.model.chartData.listHeader = $scope.model.form.listHeader;
                $scope.model.chartData.lengthObject = lengthObject;
                $scope.model.chartData.value = value;
            }
        } else {
            $scope.model.chartData.listObject = listObject;
            $scope.model.chartData.lengthObject = lengthObject;
            $scope.model.chartData.value = 9999;
            $scope.model.chartData.listHeader = $scope.model.form.listHeader;
        }
    };

    /**
     * checkIndex change
     */
      $scope.$watch('model.checkIndex', function () {
          $scope.showViewLine($scope.model.hidden.viewLine);
      }, true);

      /**
       * modify tick chart
       */
    $scope.modifyTickChart = function(){
        if($scope.status == "3"){
            $timeout(function() {
                var svg  = document.querySelector('svg');
                if(svg != undefined && svg != null){
                    // get our tspans element
                    var tspans = svg.querySelectorAll('tspan');
                    // transform it to an array so the clones don't add to the list
                    var ts = Array.prototype.slice.call(tspans);

                    for(var i = 0; i<ts.length; i++){
                        // get the content
                        var cont = ts[i].textContent.split('～');
                        // that wasn't the good one...
                        if(cont.length<2) continue;
                        // create a clone
                        var clone_2 = ts[i].cloneNode(1);
                        // set the text to the new line
                        if(!ValidateUtil.isValidTextEmpty(cont[1])){
                            clone_2.textContent = cont[1].replace(/[\s]/g, '');
                        }
                        // space it a litlle bit more
                        clone_2.setAttribute('dy', '0.9em');
                        var clone_1 = ts[i].cloneNode(1);
                        // set the text to the new line
                        if(!ValidateUtil.isValidTextEmpty(cont[1])){
                            clone_1.textContent = '~';//cont[1].replace(/[\s]/g, '');
                        }
                        // space it a litlle bit more
                        clone_1.setAttribute('dy', '0.8em');
                        // set the good text to the upperline
                        if(!ValidateUtil.isValidTextEmpty(cont[0])){
                            ts[i].textContent = cont[0].replace(/[\s]/g, '');
                        }
                        // append our clone
                        ts[i].parentNode.insertBefore(clone_2, ts[i].nextSibling);
                        ts[i].parentNode.insertBefore(clone_1, ts[i].nextSibling);
                    }
                };
            }, 500);
        }
    }

    /**
     * log resize
     */
    $scope.logResize = function () {
        $scope.modifyTickChart();
        $scope.calTabelWidth();
    };

    /**
     * div resize
     */
    $scope.$on('divChangeSize', function() {
        $scope.calTabelWidth();
    });

    /**
     * change chart data
     */
    $scope.changeChartData = function(value){
      if($scope.model.hidden.viewLine == 4){
          $scope.model.axisLabel = "%";
      }else{
          $scope.model.axisLabel = Messages.getMessage('common.chart.label.047');
      }
      $scope.showViewLine(value);
    }

    //Check all
    $scope.onCheckAll = function(){
        for (var i = 0; i < $scope.model.form.listTotalSales.length; i++) {
            var object = $scope.model.form.listTotalSales[i];
            $scope.model.checkIndex[i] = $scope.model.hidden.selectAll;
            $scope.showChartLine(i, object);
        }
    }
}]);